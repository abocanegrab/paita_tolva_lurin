--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\Tolva1280Main.src
program Tolva1280Main;

--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\Tolva1280Main.iri 
 -- Scale Aliases
Scale1    : constant integer := 1;

-- Digital I/O Aliases
DIOCRD0   : constant integer := 0;
DIO0_1    : constant integer := 1;
DIO0_2    : constant integer := 2;
DIO0_3    : constant integer := 3;
DIO0_4    : constant integer := 4;
DIO0_5    : constant integer := 5;
DIO0_6    : constant integer := 6;
DIO0_7    : constant integer := 7;
DIO0_8    : constant integer := 8;



-- Analog Output Aliases

-- Database Type Definitions and Field Aliases
type PesadasDatabase is database ("Pesadas")
    ticket: Integer;
  codEmbar: String;
  codEspec: Integer;
    codUso: Integer;
  codTrans: Integer;
  fechaIni: DateTime;
     batch: Integer;
      anio: Integer;
      acum: Real;
  fechaFin: DateTime;
  objetivo: Real;
     wzero: Integer;
      wval: Real;
     wspan: Integer;
    factor: Real;
     prove: String;
end database;
type BalanzaDatabase is database ("Balanza")
    Nombre: String;
     Serie: String;
    Modelo: String;
    Numero: Integer;
     Flujo: String;
end database;
type EmpresaDatabase is database ("Empresa")
     Razon: String;
   Address: String;
       RUC: String;
  Telefono: String;
       EIP: String;
       NPL: String;
    Ticket: Integer;
end database;
type EmbarcaDatabase is database ("Embarca")
        id: Integer;
    Codigo: String;
    Nombre: String;
end database;
type ConfigDatabase is database ("Config")
  Objetivo: Real;
    Minimo: Real;
    Maximo: Real;
  TEstabil: Real;
     TRein: Real;
   TError1: Real;
   TError2: Real;
end database;
type LogDatabase is database ("Log")
   logDate: DateTime;
      desc: String;
end database;
type CalibraDatabase is database ("Calibra")
     Wzero: Integer;
      Wval: Real;
     Wspan: Integer;
    Factor: Real;
     FeCal: String;
end database;
type RecuperaDatabase is database ("Recupera")
    ticket: Integer;
  codEmbar: String;
  codEspec: Integer;
    codUso: Integer;
  codTrans: Integer;
   fInicio: DateTime;
     batch: Integer;
   acumula: Real;
    estado: Integer;
   eventos: Integer;
     wzero: Integer;
     wspan: Integer;
      wval: Real;
    factor: Real;
  objetivo: Real;
end database;
type DetalleDatabase is database ("Detalle")
    ticket: Integer;
     batch: Integer;
      peso: Real;
     fecha: DateTime;
  objetivo: Real;
    factor: Real;
end database;
type AlertaDatabase is database ("Alerta")
    ticket: Integer;
     Orden: Real;
     fecha: DateTime;
   codTipo: Integer;
end database;
type TipoAlerDatabase is database ("TipoAler")
    codigo: Integer;
    nombre: String;
end database;
type TicketEmDatabase is database ("TicketEm")
  codEmbar: String;
    ticket: Integer;
     fecha: DateTime;
end database;
type UsoDatabase is database ("Uso")
    Codigo: Integer;
    Nombre: String;
end database;
type EspecieDatabase is database ("Especie")
    Codigo: Integer;
    Nombre: String;
end database;
type DestinoDatabase is database ("Destino")
    Codigo: Integer;
    Nombre: String;
end database;
type TransporDatabase is database ("Transpor")
    Codigo: Integer;
    Nombre: String;
   Incluye: Integer;
end database;

Pesadas_ticket   : constant integer := 1;
Pesadas_codEmbar : constant integer := 2;
Pesadas_codEspec : constant integer := 3;
Pesadas_codUso   : constant integer := 4;
Pesadas_codTrans : constant integer := 5;
Pesadas_fechaIni : constant integer := 6;
Pesadas_batch    : constant integer := 7;
Pesadas_anio     : constant integer := 8;
Pesadas_acum     : constant integer := 9;
Pesadas_fechaFin : constant integer := 10;
Pesadas_objetivo : constant integer := 11;
Pesadas_wzero    : constant integer := 12;
Pesadas_wval     : constant integer := 13;
Pesadas_wspan    : constant integer := 14;
Pesadas_factor   : constant integer := 15;
Pesadas_prove    : constant integer := 16;

Balanza_Nombre   : constant integer := 1;
Balanza_Serie    : constant integer := 2;
Balanza_Modelo   : constant integer := 3;
Balanza_Numero   : constant integer := 4;
Balanza_Flujo    : constant integer := 5;

Empresa_Razon    : constant integer := 1;
Empresa_Address  : constant integer := 2;
Empresa_RUC      : constant integer := 3;
Empresa_Telefono : constant integer := 4;
Empresa_EIP      : constant integer := 5;
Empresa_NPL      : constant integer := 6;
Empresa_Ticket   : constant integer := 7;

Embarca_id       : constant integer := 1;
Embarca_Codigo   : constant integer := 2;
Embarca_Nombre   : constant integer := 3;

Config_Objetivo : constant integer := 1;
Config_Minimo   : constant integer := 2;
Config_Maximo   : constant integer := 3;
Config_TEstabil : constant integer := 4;
Config_TRein    : constant integer := 5;
Config_TError1  : constant integer := 6;
Config_TError2  : constant integer := 7;

Log_logDate  : constant integer := 1;
Log_desc     : constant integer := 2;

Calibra_Wzero    : constant integer := 1;
Calibra_Wval     : constant integer := 2;
Calibra_Wspan    : constant integer := 3;
Calibra_Factor   : constant integer := 4;
Calibra_FeCal    : constant integer := 5;

Recupera_ticket   : constant integer := 1;
Recupera_codEmbar : constant integer := 2;
Recupera_codEspec : constant integer := 3;
Recupera_codUso   : constant integer := 4;
Recupera_codTrans : constant integer := 5;
Recupera_fInicio  : constant integer := 6;
Recupera_batch    : constant integer := 7;
Recupera_acumula  : constant integer := 8;
Recupera_estado   : constant integer := 9;
Recupera_eventos  : constant integer := 10;
Recupera_wzero    : constant integer := 11;
Recupera_wspan    : constant integer := 12;
Recupera_wval     : constant integer := 13;
Recupera_factor   : constant integer := 14;
Recupera_objetivo : constant integer := 15;

Detalle_ticket   : constant integer := 1;
Detalle_batch    : constant integer := 2;
Detalle_peso     : constant integer := 3;
Detalle_fecha    : constant integer := 4;
Detalle_objetivo : constant integer := 5;
Detalle_factor   : constant integer := 6;

Alerta_ticket   : constant integer := 1;
Alerta_Orden    : constant integer := 2;
Alerta_fecha    : constant integer := 3;
Alerta_codTipo  : constant integer := 4;

TipoAler_codigo   : constant integer := 1;
TipoAler_nombre   : constant integer := 2;

TicketEm_codEmbar : constant integer := 1;
TicketEm_ticket   : constant integer := 2;
TicketEm_fecha    : constant integer := 3;

Uso_Codigo   : constant integer := 1;
Uso_Nombre   : constant integer := 2;

Especie_Codigo   : constant integer := 1;
Especie_Nombre   : constant integer := 2;

Destino_Codigo   : constant integer := 1;
Destino_Nombre   : constant integer := 2;

Transpor_Codigo   : constant integer := 1;
Transpor_Nombre   : constant integer := 2;
Transpor_Incluye  : constant integer := 3;



-- Serial Port Aliases
Port1     : constant integer := 1;
Port2     : constant integer := 2;
Port3     : constant integer := 3;

-- Ethernet Communication Aliases
TCPS      : constant string := "TCPS";
UDPS      : constant string := "UDPS";
TCPC1     : constant string := "TCPC1";
TCPC2     : constant string := "TCPC2";
TCPC3     : constant string := "TCPC3";

-- Setpoint Aliases
SP1       : constant integer :=1;
SP2       : constant integer :=2;

-- Widget Aliases
lbl2      : constant integer := 2;
lbl3      : constant integer := 3;
lbl4      : constant integer := 4;
lbl5      : constant integer := 5;
lbl6      : constant integer := 6;
lbl7      : constant integer := 7;
img8      : constant integer := 8;
bar9      : constant integer := 9;
lbl10     : constant integer := 10;
lbl11     : constant integer := 11;
lbl12     : constant integer := 12;
img13     : constant integer := 13;
lbl14     : constant integer := 14;
lbl15     : constant integer := 15;
lbl16     : constant integer := 16;
line17    : constant integer := 17;
lbl18     : constant integer := 18;
img19     : constant integer := 19;
lbl20     : constant integer := 20;
img21     : constant integer := 21;
lbl22     : constant integer := 22;
line23    : constant integer := 23;
img24     : constant integer := 24;
lbl25     : constant integer := 25;
img26     : constant integer := 26;
lbl27     : constant integer := 27;
lbl28     : constant integer := 28;
lbl29     : constant integer := 29;
img30     : constant integer := 30;
img31     : constant integer := 31;
img32     : constant integer := 32;
img33     : constant integer := 33;
sym34     : constant integer := 34;
sym35     : constant integer := 35;
lbl36     : constant integer := 36;
line37    : constant integer := 37;
img38     : constant integer := 38;
lbl39     : constant integer := 39;
img40     : constant integer := 40;
lbl41     : constant integer := 41;
img42     : constant integer := 42;
lbl43     : constant integer := 43;
img44     : constant integer := 44;
lbl45     : constant integer := 45;
img46     : constant integer := 46;
lbl47     : constant integer := 47;
img48     : constant integer := 48;
lbl49     : constant integer := 49;
lbl50     : constant integer := 50;
img51     : constant integer := 51;
img52     : constant integer := 52;
line53    : constant integer := 53;
img54     : constant integer := 54;
lbl55     : constant integer := 55;
lbl56     : constant integer := 56;
lbl57     : constant integer := 57;
lbl58     : constant integer := 58;
lbl59     : constant integer := 59;
lbl60     : constant integer := 60;
img61     : constant integer := 61;
img62     : constant integer := 62;
lbl63     : constant integer := 63;
img64     : constant integer := 64;
lbl65     : constant integer := 65;
line66    : constant integer := 66;
img67     : constant integer := 67;
lbl68     : constant integer := 68;
lbl69     : constant integer := 69;
lbl70     : constant integer := 70;
lbl71     : constant integer := 71;
lbl72     : constant integer := 72;
lbl73     : constant integer := 73;
lbl74     : constant integer := 74;
lbl75     : constant integer := 75;
lbl76     : constant integer := 76;
lbl77     : constant integer := 77;
lbl78     : constant integer := 78;
lbl79     : constant integer := 79;
img80     : constant integer := 80;
img81     : constant integer := 81;
lbl82     : constant integer := 82;
line83    : constant integer := 83;
img84     : constant integer := 84;
lbl85     : constant integer := 85;
lbl86     : constant integer := 86;
lbl87     : constant integer := 87;
lbl88     : constant integer := 88;
lbl89     : constant integer := 89;
lbl90     : constant integer := 90;
lbl91     : constant integer := 91;
lbl92     : constant integer := 92;
lbl93     : constant integer := 93;
lbl94     : constant integer := 94;
img95     : constant integer := 95;
img96     : constant integer := 96;
lbl97     : constant integer := 97;
line98    : constant integer := 98;
img99     : constant integer := 99;
lbl100    : constant integer := 100;
lbl101    : constant integer := 101;
line102   : constant integer := 102;
lbl103    : constant integer := 103;
lbl104    : constant integer := 104;
lbl105    : constant integer := 105;
lbl106    : constant integer := 106;
lbl107    : constant integer := 107;
lbl108    : constant integer := 108;
lbl109    : constant integer := 109;
lbl110    : constant integer := 110;
lbl111    : constant integer := 111;
lbl112    : constant integer := 112;
lbl113    : constant integer := 113;
lbl114    : constant integer := 114;
lbl115    : constant integer := 115;
lbl116    : constant integer := 116;
lbl117    : constant integer := 117;
lbl118    : constant integer := 118;
img119    : constant integer := 119;
lbl120    : constant integer := 120;
line121   : constant integer := 121;
lbl122    : constant integer := 122;
lbl123    : constant integer := 123;
lbl124    : constant integer := 124;
line125   : constant integer := 125;
img126    : constant integer := 126;
lbl127    : constant integer := 127;
lbl130    : constant integer := 130;
lbl131    : constant integer := 131;
lbl132    : constant integer := 132;
lbl133    : constant integer := 133;
lbl134    : constant integer := 134;
lbl135    : constant integer := 135;
lbl136    : constant integer := 136;
lbl137    : constant integer := 137;
lbl138    : constant integer := 138;
lbl139    : constant integer := 139;
lbl140    : constant integer := 140;
lbl141    : constant integer := 141;
lbl142    : constant integer := 142;
lbl143    : constant integer := 143;
lbl144    : constant integer := 144;
lbl145    : constant integer := 145;

USBPRN    : constant string := "USBPRN";
ADVPRN    : constant string := "ADVPRN";
 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\Tolva1280Main.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\utils\Trim.iri 
 --We have a function to convert a hex string to an integer:

  ----------------------------------------------------------------------------
  -- Function Name     : HexToInteger
  -- Purpose           : This function convert a hex ascii string to an
  --                     integer value
  -- Value Parameters  : hstr - input string
  -- Variable Params   : None
  -- Return Parameter  : The integer value of the hex string. -1 indicates
  --                     invalid character encountered
  -- Side Effects      : None
  ----------------------------------------------------------------------------

  function HexToInteger(hstr : string ) : integer;

    pos   : integer := 1;
    val   : integer := 0;
    ch    : integer;

    begin

      while (pos <= Len(hstr))
      loop
        val := val * 16;
        ch := Asc(Mid$(hstr,pos,1)) - 48;
        if (ch >= 0) and
           (ch <= 9) then
          val := val + ch;
        else
          ch := ch - 7;
          if (ch >= 10) and
             (ch <= 15) then
            val := val + ch;
          else
            return -1;
          end if;
        end if;
        pos := pos + 1;
      end loop;
      return val;
  end;

--As to the blank removal, that depends. 
--I have functions that will strip leading or trailing blanks. I do not have a function that will remove all the blanks in a string.

  ----------------------------------------------------------------------------
  --  Function Name     : Locate
  --                    :
  --  Purpose           : Returns the starting location in "input_string" of
  --                    : the first occurrence of the string "match_string"
  --                    :
  --  Value Parameters  : input_string  : the string to be searched
  --                    : match_string  : the string to be found
  --  Variable Params   : None
  --  Return Parameter  : first location of "match_string" in "input_string"
  --  Side Effects      : None
  ----------------------------------------------------------------------------

  function Locate( input_string : string;
                   match_string : string ) : integer;

    position     : integer;
    end_position : integer;


    begin

      position := 1;
      end_position := Len(input_string) + 1 - Len(match_string) ;

      while position <= end_position
      loop
        if match_string = Mid$(input_string, position, Len(match_string)) then
          return position;
        end if;
        position := position + 1;
      end loop;
      return 0;
  end;



  ----------------------------------------------------------------------------
  --  Function Name     : TrimLeft$
  --                    :
  --  Purpose           : Strips off all leading occurrences in "input_string"
  --                    : of any characters in the string "trim_chars".
  --                    :
  --  Value Parameters  : input_string  : the string to be trimmed
  --                    : trim_chars    : a string of the characters to be
  --                    :                 removed
  --  Variable Params   : None
  --  Return Parameter  : Trimmed string
  --  Side Effects      : None
  ----------------------------------------------------------------------------

  function TrimLeft$( input_string : string;
                      trim_chars   : string ) : string;

    result   : string;
    position : integer := 1;

    begin

      while (position <= Len(input_string))
      loop


        -- If the current character is not in the trim list
        if ( Locate(trim_chars, Mid$(input_string, position, 1)) = 0 ) then

          -- return remainder of input string
          result := Mid$(input_string, position, Len(input_string));
          return result;

        end if;

        position := position + 1;


      end loop;

      return "";

  end;


  ----------------------------------------------------------------------------
  --  Function Name     : TrimRight$
  --                    :
  --  Purpose           : Strips off all trailing occurrences in "input_string"
  --                    : of the characters in "trim_chars".
  --                    :
  --  Value Parameters  : input_string  : the string to be trimmed
  --                    : trim_chars    : a string of the characters to be
  --                    :                 removed
  --  Variable Params   : None
  --  Return Parameter  : Trimmed string
  --  Side Effects      : None
  ----------------------------------------------------------------------------

  function TrimRight$( input_string : string;
                       trim_chars   : string ) : string;

    result   : string;
    position : integer;

    begin

      position := Len(input_string);
      while (position > 0)
      loop

        -- If the current character is not in the trim list
        if (Locate(trim_chars,Mid$(input_string, position, 1)) = 0) then

          -- return start of input string
          result := Left$(input_string, position);
          return result;

        end if;

        position := position - 1;


      end loop;

      return "";

  end;


  ----------------------------------------------------------------------------
  --  Function Name     : Trim$
  --                    :
  --  Purpose           : Strips off all leading and trailing occurrences in
  --                    : "input_string" of the characters in "trim_chars".
  --                    :
  --  Value Parameters  : input_string  : the string to be trimmed
  --                    : trim_chars    : a string of the characters to be
  --                    :                 removed
  --  Variable Params   : None
  --  Return Parameter  : Trimmed string
  --  Side Effects      : None
  ----------------------------------------------------------------------------

  function Trim$( input_string : string;
                  trim_chars   : string ) : string;

    result : string;

    begin

      result := TrimRight$(input_string, trim_chars);
      result := TrimLeft$(result, trim_chars);
      return result;

  end;
 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\utils\Trim.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\constants\constants.iri 
 CONST_ERROR_GETTING_DATA: string := "No se pudo obtener la información";
CONST_MAIN_MESSAGE: string := "Sistema de Pesaje Flores";
CONST_CRUD_CODE: string := "Codigo";
CONST_CRUD_NAME: string := "Nombre";
CONST_CRUD_TRANSP_THIRD: string := "Incluye";
CONST_CRUD_EMB_CODE: string := "Matricula";
CONST_CRUD_EMB_NAME: string := "Embarcacion";
CONST_CRUD_TITLE_EMB: string :="Gestión de Embarcaciones";
CONST_CRUD_TITLE_ESP: string :="Gestión de Especies";
CONST_CRUD_TITLE_USO: string :="Gestión de Usos";
CONST_CRUD_TITLE_TRA: string :="Gestión de Transportes";
-- CRUD
CONST_CRUD_EMB_P_CODE: string :="Ingresar la Placa";
CONST_CRUD_EMB_P_NAME: string :="Nombre de la Embarcacion";

CONST_CRUD_ESP_P_CODE: string :="Ingresar el Codigo de Especie";
CONST_CRUD_ESP_P_NAME: string :="Ingresar el nombre de la Especie";

CONST_CRUD_USO_P_CODE: string :="Ingresar el Codigo del Uso";
CONST_CRUD_USO_P_NAME: string :="Ingresar el nombre del Uso";

CONST_CRUD_TRA_P_CODE: string :="Ingresar el Codigo de Tipo de Transporte";
CONST_CRUD_TRA_P_NAME: string :="Ingresar el nombre del tipo de transporte";
CONST_CRUD_TRA_P_INCL: string :="Incluye Embarcaciones? (1) SI, (0) NO";

CONST_DATA_ERROR: string := "Dato incorrecto! ";
CONST_DATA_NO_EXIST: string := "Dato no existe! ";
CONST_GEN_DELETE_CRUD: string := "Seguro de eliminar: ";
CONST_NO_RECORD_TO_PROCESS : string := "No hay registro disponible";
-- end CRUD

-- CRUD CONFIG
CONST_CRUD_CONF_P_PEOB : string := "Ingresar Peso Objetivo";
CONST_CRUD_CONF_P_MAXI : string := "Ingresar Capacidad Maxima";
CONST_CRUD_CONF_P_MINI : string := "Ingresar Peso Minimo";
CONST_CRUD_CONF_P_TEST : string := "Ingresar Tiempo Estabilidad";
CONST_CRUD_CONF_P_TREI : string := "Ingresar Tiempo Reinicio";
CONST_CRUD_CONF_P_ERR1 : string := "Ingresar Error 1";
CONST_CRUD_CONF_P_ERR2 : string := "Ingresar Error 2";
-- END CRUD CONFIG

-- CRUD EMPRESA
CONST_CRUD_EMPR_P_RAZO : string := "Ingresar Razón Social";
CONST_CRUD_EMPR_P_DIRE : string := "Ingresar Dirección";
CONST_CRUD_EMPR_P_RUC_ : string := "Ingresar RUC";
CONST_CRUD_EMPR_P_TELE : string := "Ingresar Teléfono";
CONST_CRUD_EMPR_P_EIP_ : string := "Ingresar EIP";
CONST_CRUD_EMPR_P_NPL_ : string := "Ingresar NPL";
CONST_CRUD_EMPR_P_TICK : string := "Ingresar Ticket";
-- END CRUD EMPRESA

-- CRUD BALANZA
CONST_CRUD_BALA_P_SERI : string := "Ingresar Serie de Balanza";
CONST_CRUD_BALA_P_MODE : string := "Ingresar Modelo";
CONST_CRUD_BALA_P_NOMB : string := "Ingresar Nombre de Equipo";
CONST_CRUD_BALA_P_NUME : string := "Ingresar Número";
CONST_CRUD_BALA_P_FLUJ : string := "Ingresar Flujo de procesamiento";
-- END CRUD BALANZA

-- EVENTOS
CONST_EVENT_1 : string := "COMPUERTAS ABIERTAS";
CONST_EVENT_2 : string := "INTERV NO AUTORIZADA";
CONST_EVENT_3 : string := "FALLA DE CELDAS";
CONST_EVENT_4 : string := "PROBLEMA EN LA RED ELECTRICA";

-- PROCESO
CONST_PROCESO_P_TRAN : string := "Ingresar Codigo de Tipo de Transporte";
CONST_PROCESO_P_PLAC : string := "Ingresar Placa del Transporte";
CONST_PROCESO_P_MATR : string := "Ingresar Matricula de la Embarcacion";
CONST_PROCESO_P_MNOM : string := "Ingresar el Nombre de la Embarcación";
CONST_PROCESO_P_ESPE : string := "Ingresar Codigo de Especie";
CONST_PROCESO_P_USO : string := "Ingresar Codigo de Uso";
CONST_PROCESO_P_PRO : string := "Ingresar el Proveedor";
CONST_MESSAGE_CARGA : string := "Cargando producto...";
CONST_MESSAGE_ESTAB : string := "Estabilizando...";
CONST_MESSAGE_DESCA : string := "Descargando producto ...";
CONST_MESSAGE_REINI : string := "Reinciando proceso...";
CONST_MESSAGE_FIN_ : string := "Proceso finalizado...";

-- LIMPIEZA TOLVA
CONST_LIMPIEZA_P_TIME : string := "Tiempo de limpieza (mins)";
CONST_DEFAULT_LIMPIEZA_TIME: string := "10";

-- ACTUALIZAR FECHA CALIBRA
CONST_CALIBRA_P_DATE : string := "Ingresar fecha de calibración";


-- ASOCIA EMBARCACION
CONST_ASOCIAEMB_P_MATRI : string := "Ingrese Matricula a asociar";
CONST_ASOCIAEMB_P_NOMBR : string := "Ingrese nombre de embarcacion";
CONST_ASOCIAEMB_P_SEGUIR : string := "¿Desea asociar otro?";
CONST_ASOCIAEMB_P_ERROR : string := "Valor incorrecto. Ingrese una matricula";

CONST_PROCESO_INICIAR: string := "¿Desea iniciar el proceso?";
CONST_PROCESO_FINALIZAR: string := "¿Desea finalizar el proceso?";
CONST_DEFAULT_SI: string := "S";
CONST_DEFAULT_NO: string := "N";

CONST_ADV_PRINT: string := "ADV";

CONST_IMAGE_START: string :="actions/start.png";
CONST_IMAGE_STOP: string :="actions/finish.png";
CONST_IMAGE_PAUSE: string :="actions/pause.png";
CONST_IMAGE_CONTINUE: string :="actions/continue.png";
CONST_IMAGE_DATA: string :="actions/data.png";

CONST_IMAGE_MENU: string :="menu/menu.png";
CONST_IMAGE_MENU_BACK: string :="menu/back.png";
CONST_IMAGE_MENU_COMPANY: string :="menu/company.png";
CONST_IMAGE_MENU_CRUD: string :="menu/crud.png";
CONST_IMAGE_MENU_OPTIONS: string :="menu/options.png";
CONST_IMAGE_MENU_SCALE: string :="menu/scale.png";
CONST_IMAGE_MENU_SHIPS: string :="menu/ships.png";
CONST_IMAGE_MENU_USES: string :="menu/uses.png";
CONST_IMAGE_MENU_ESPECIE: string :="menu/especies.png";

--PRINT
CONST_PRINT_DEFAULT_VALUE: string := "1";
CONST_PRINT_PROMPT_PRINT: string := "Ingresar la cantidad de últimos tickets a imprimir. (Vacio para todos)";
CONST_PRINT_INIT_PRINT: string := "Reimpriendo tickets...(apagar para detener)";
CONST_PRINT_FIN_PRINT: string := "Reimpresion finalizada...";

--PRINT A DEMANDA
CONST_PRINT_ON_DEMAND_PROMPT : string := "Ingresa el numero de ticket a reimiprimir";
CONST_PRINT_ON_DEMAND_ERROR : string := "Numero de ticket incorrecto";
CONST_PRINT_ON_DEMAND_ERROR_SEARCH : string := "Ticket no existe para reimpresion";

CONST_MAX_TICKETEMB : integer := 300; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\constants\constants.iri

--Entities
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Balanza.iri 
 type typBalanza is record 
   Serie : string;
   Modelo  : string;
   Nombre  : string;
   Numero : integer;
   Flujo : string;
end record;

type typResponseBalanza is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typBalanza;
end record; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Balanza.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Configuracion.iri 
 type typConfiguracion is record 
   Objetivo : real;
   Minimo  : real;
   Maximo  : real;
   TEstabilidad : real;
   TReinicio : real;
   TError1 : real;
   TError2 : real;
end record;

type typResponseConfiguracion is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typConfiguracion;
end record; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Configuracion.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Empresa.iri 
 type typEmpresa is record 
   Razon : string;
   Direccion   : string;
   RUC   : string;
   Telefono  : string;
   EIP : string;
   NPL : string;
   Ticket: integer;
end record;

type typResponseEmpresa is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typEmpresa;
end record; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Empresa.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Embarcacion.iri 
 type typEmbarcacion is record 
   id: integer;
   codigo : string;
   nombre  : string;
end record;

type typEmbarcaciones is array [2000] of typEmbarcacion;

type typResponseEmbarcacion is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typEmbarcacion;
end record;

type typResponseEmbarcaciones is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typEmbarcaciones;
end record; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Embarcacion.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Especie.iri 
 type typEspecie is record 
   codigo : integer;
   nombre  : string;
   sap : string;
end record;

type typEspecies is array [100] of typEspecie;

type typResponseEspecie is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typEspecie;
end record;

type typResponseEspecies is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typEspecies;
end record; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Especie.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Recupera.iri 
 type typRecupera is record 
    ticket : integer;
    codEmbarca   : string;
    nomEmbarca   : string;
    codEspecie  : integer;
    nomEspecie  : string;
    codUso : integer;
    nomUso : string;
    codTransporte : integer;
    nomTransporte : string;
    incluyeTransporte : integer;
    Proveedor : string;
    fecInicio : datetime;
    batch: integer;
    acumulado: real;
    estado: integer;
    eventos: integer;
    wzero: integer;
    wspan: integer;
    wval: real;
    factor: real;
    objetivo: real;
    iniciado: BooleanType;
   Anio : integer;
end record;

-- type typResponseRecupera is record
--     HasError: BooleanType;
--     HasData: BooleanType;
--     ErrorMessage: string;
--     data: typRecupera;
-- end record; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Recupera.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\TipoTransporte.iri 
 type typTransporte is record 
   codigo : integer;
   nombre  : string;
   incluye: integer;
end record;

type typTransportes is array [100] of typTransporte;

type typResponseTransporte is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typTransporte;
end record;

type typResponseTransportes is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typTransportes;
end record; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\TipoTransporte.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Uso.iri 
 type typUso is record 
   codigo : integer;
   nombre  : string;
   sap : string;
end record;

type typUsos is array [100] of typUso;

type typResponseUso is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typUso;
end record;


type typResponseUsos is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typUsos;
end record; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Uso.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Calibracion.iri 
 type typCalibracion is record 
   Wzero : integer;
   Wval  : real;
   Wspan  : integer;
   Factor  : real;
   FeCal : string;
end record;

type typResponseCalibracion is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typCalibracion;
end record; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Calibracion.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Temporal.iri 
 type typTemporal is record
    codEmbarca   : string;
    nomEmbarca   : string;
    codEspecie  : integer;
    nomEspecie  : string;
    codUso : integer;
    nomUso : string;
    codTransporte : integer;
    nomTransporte : string;
    incluyeTransporte : integer; -- 1 SI, 0 NO
    Proveedor : string;
    estado: integer;
end record; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Temporal.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Detalle.iri 
 type typDetalle is record 
   Ticket  : integer;
   Batch  : integer;
   Peso : real;
   Fecha : datetime;
   Objetivo : real;
   Factor : real;
end record;

type typDetalles is array [1000] of typDetalle;

type typResponseDetalle is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typDetalle;
end record;

type typResponseDetalles is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typDetalles;
    Count: integer;
end record; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Detalle.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Pesaje.iri 
 type typPesaje is record 
   Ticket : integer;
   CodEmbarca   : string;
   Embarcacion : string;
   CodEspecie  : integer;
   Especie : string;
   CodUso : integer;
   Uso : string;
   codTransporte : integer;
   Transporte : string;
   incluyeTransporte : integer;
   Proveedor : string;
   FechaInicio : datetime;
   Batch : integer;
   Acumulado : real;
   FechaFin : datetime;
   Objetivo : real;
   Wzero : integer;
   Wval : real;
   Wspan : integer;
   Factor: real;
   Anio : integer;
end record;

type typPesajes is array[2000] of typPesaje;

type typResponsePesaje is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typPesaje;
end record;

type typResponsePesajes is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typPesajes;
end record; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Pesaje.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Alerta.iri 
 type typAlerta is record 
   Ticket : integer;
   Orden   : integer;
   Fecha : datetime;
   idTipoAlerta  : integer;
   TipoAlerta : string;
   Cantidad: integer;
end record;

type typAlertas is array[10] of typAlerta;

type typResponseAlerta is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typAlerta;
end record;

type typResponseAlertas is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typAlertas;
    Count: integer;
end record; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\Alerta.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\TicketEmbarca.iri 
 type typTicketEmbarca is record 
   ticket: integer;
   codEmbar : string;
   Embarcacion  : string;
   fecha    : datetime;
end record;

type typTicketEmbarcas is array [20] of typTicketEmbarca;

type typResponseTicketEmbarca is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typTicketEmbarca;
end record;

type typResponseTicketEmbarcas is record
    HasError: BooleanType;
    HasData: BooleanType;
    ErrorMessage: string;
    data: typTicketEmbarcas;
    Count: integer;
end record; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\entities\TicketEmbarca.iri

--Global vars
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\global\enums.iri 
 type enumEstado is (Activo, Inactivo, Pausado);

type enumCrudActions is (InitCrud, CodigoCrud, NombreCrud, IncluyeCrud);

type enumCrudType is (AddCrud, UpdateCrud, DeleteCrud);

type enumConfigActions is (
    InitPObjConfig, PesoObjConfig,
    InitPesosConfig, CapMaxConfig, PesoMinConfig,
    InitTiemposConfig, EstabilConfig, ReinConfig, 
    InitErrorConfig, Error1Config, Error2Config);

type enumBalanzaActions is (InitBalanza, SerieBalanza, ModeloBalanza,
    NombreBalanza, NumBalanza, FlujoBalanza);

type enumScreen is (ProcesoSc, MenuPrincipalSc, DataMenuSc, EmbarcaSc,
    EspecieSc, UsoSc, TransporteSc, EmpresaSc, BalanzaSc,
    ConfigSc, UtilesSc, ReporteSc);

type enumEmpresaActions is (
    InitEmpresa, RazonEmpresa,
    DireccionEmpresa, RUCEmpresa, TelefonoEmpresa,
    EIPEmpresa, NPLEmpresa,
    InitTicketEmpresa, TicketEmpresa);

type enumProcesoActions is (
    InitProceso, TransporteProceso, PlacaProceso, MatriculaProceso, NombreEmbProceso,
    EspecieProceso, UsoProceso, ProveedorProceso);

type enumButtonProcesoActions is (
    DataButtonProceso, IniciarButtonProceso, FinalizarButtonProceso,
    PausaReanudaButtonProceso, ObjetivoButtonProceso, LimpiezaButtonProceso,
    NumeroTicketButtonProceso, AsociaEmbarcaButtonProceso);

type enumLimpiaTolvaActions is (
    InitLimpia, TiempoLimpia, FinalizaLimpia
);

type enumCalibracionActions is (
    InitCalibracion, FechaCalibraAction
);

type enumAsociaEmbarcaActions is (
    InitAsocia, BuscaMatriculaAsocia, AgregaEmbarcaAsocia, PreguntaAsocia
);

type enumPrinterActions is ( InitPrinter, ImprimirPrinter, InitSearchPrinter, ImprimirOnlyOne ); 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\global\enums.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\global\vars.iri 
 gbEmpresa   : typEmpresa;
gbConfig    : typConfiguracion;
gbBalanza   : typBalanza; 
gbLimpieza : enumEstado; 
gbProceso : enumEstado;
gbRecupera : stored typRecupera;
gbTemporal : stored typTemporal;
gbListEmbarca : typEmbarcaciones;
gbTotalEmbarca : integer;
gbListEspecie : typEspecies;
gbTotalEspecie : integer;
gbListUso : typUsos;
gbTotalUso : integer;
gbListTransporte : typTransportes;
gbTotalTransporte : integer;
gbPosCrud : integer;

gbListPesaje : typPesajes;
gbTotalPesaje : integer;

gbActionCrud : enumCrudActions;
gbTypeCrud : enumCrudType;
gbActionConfig : enumConfigActions;
gbLastPrompUsed : string;
gbScreenActive : enumScreen;
gbActionEmpresa : enumEmpresaActions;
gbActionBalanza : enumBalanzaActions;

gbPesoCaptura : real;
gbFinal : integer;
gbSPActual: integer;
gbStatusIntNoAut: integer;
gbStatusCompAb: integer;
gbNumAlerta: integer;

gbActionProceso : enumProcesoActions;
gbButtonProceso : enumButtonProcesoActions;
gbActionLimpia : enumLimpiaTolvaActions;
gbCalibraProceso : enumCalibracionActions;
gbAsociaProceso : enumAsociaEmbarcaActions;
gbActionPrinter : enumPrinterActions; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\global\vars.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\global\temps.iri 
 tmpEmpresa   : typEmpresa;
tmpConfig    : typConfiguracion;
tmpBalanza   : typBalanza;
tmpEmbarca : typEmbarcacion;
tmpEspecie : typEspecie;
tmpUso : typUso;
tmpTransporte : typTransporte; 
tmpTiempoLimpieza : real;
tmpTiempoLimpiezaInSeconds : integer;

tmpTicketEmbarca : typTicketEmbarca;
tmpMatriEmbAsocia : string; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\global\temps.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\utils\Commons.iri 
 procedure Logger(message : string);
begin
    -- DisplayStatus(message);
    -- ProgramDelay(100);
    return;
end;

procedure DefineAndStartTimer(number: integer; duration : real; timeMode: TimerMode);
begin
    SetTimer(number, duration);
    SetTimerMode(number, timeMode);
    StartTimer(number);
end;

procedure SendToUSBPrinter(text : string);
begin
    Writeout(USBPRN, text);
end;

procedure SendToUSBPrinterLn(text : string);
begin
    Writeout(USBPRN, text);
    Writeout(USBPRN, Chr$(13));
    Writeout(USBPRN, Chr$(10));
end;

procedure DisplayAndClean(val : string);
begin
    StopTimer(1);
    DisplayStatus(val);
    DefineAndStartTimer(1, 500, TimerOneShot);
end;

function IsStringNotEmpty (value : string) : BooleanType;
local : string;
begin
    local := Trim$(value, " ");
    if (Len(local) > 0) then   
        return BoolTrue;
    else
        return BoolFalse;
    end if;
end;

function AreStringEqual (value1 : string; value2 : string) : BooleanType;
local1 : string;
local2 : string;
begin
    local1 := UCase$(Trim$(value1, " "));
    local2 := UCase$(Trim$(value2, " "));
    if (local1 = local2) then   
        return BoolTrue;
    else
        return BoolFalse;
    end if;
end;

function CleanString (value : string) : string;
local : string;
begin
    return Trim$(value, " ");
end;

function IsValidInt (value : string) : BooleanType;
local : string;
localInt: integer;
begin
    local := Trim$(value, " ");
    localInt := stringtointeger(local);
    if (localInt > 0) then   
        return BoolTrue;
    else
        return BoolFalse;
    end if;
end;

function IsValidReal (value : string) : BooleanType;
local : string;
localReal: real;
begin
    local := Trim$(value, " ");
    localReal := stringtointeger(local);
    if (localReal > 0) then   
        return BoolTrue;
    else
        return BoolFalse;
    end if;
end;

procedure HabilitarSP(port : integer);
begin
    if (port = 1) then
        SetSPValue(port, gbConfig.Objetivo);   
    elsif (port = 2) then
        SetSPValue(port, gbConfig.Minimo);
    end if;

    EnableSp(port);
    SetDigOut(0, port, 1);
end;

procedure DeshabilitarSP(port : integer);
begin
    DisableSp(port);
    SetDigOut(0, port, 0);
end;


function ObtieneAnio : integer; 
c_date : datetime;   
i_anio : integer;
i_mes : integer;
i_dia : integer;
l_fecha : string;
begin
    c_date := SystemTime;                 
    l_fecha := Date$(c_date);
    i_anio:=StringToInteger(Mid$(l_fecha,7,4));
    return i_anio;
end;

function Redondea(peso:real) : string;
result : string;
begin
    result:="";
    peso:=peso/1000;
    result:=RealToString(peso, 8, 4);
    return result; 
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\utils\Commons.iri

--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\constants\DefaultDbValues.iri 
 --Empresa
function defBdEmpresa: typEmpresa;
local : typEmpresa;
begin
    local.Razon:="Empresa de Prueba";
    local.Direccion:="Direccion de Prueba";
    local.RUC:="12345678901";
    local.Telefono:="Telefono de Prueba";
    local.EIP:="123456789";
    local.NPL:="1234";
    local.Ticket:= 0;
    return local;
end;

--Balanza
function defBdBalanza: typBalanza;
local : typBalanza;
begin
    local.Nombre:="Tolva de Residuos";
    local.Serie:="1000001";
    local.Modelo:="1280";
    local.Numero:=1;
    local.Flujo:="100m3/hora";

    return local;
end;

--Config
function defDbConfig: typConfiguracion;
local : typConfiguracion;
begin
    local.Objetivo:=1500;
    local.Minimo:=20;
    local.Maximo:=2000;
    local.TEstabilidad:=1.5;
    local.TReinicio:=1.2;
    local.TError1:=0.5;
    local.TError2:=0.5;

    return local;
end;

--Embarcacion
function defDbEmbarca: typEmbarcacion;
local : typEmbarcacion;
begin
    local.Codigo:="99999";
    local.Nombre:="Prueba";

    return local;
end;

--Especie
function defDbEspecie: typEspecie;
local : typEspecie;
begin
    local.Codigo:=1;
    local.Nombre:="Anchoveta";
    local.Sap := "0";

    return local;
end;

--Uso
function defDbUso: typUso;
local : typUso;
begin
    local.Codigo:=1;
    local.Nombre:="Conserva";
    local.Sap := "0";

    return local;
end;

--Transporte
function defDbTransporte: typTransporte;
local : typTransporte;
begin
    local.Codigo:=1;
    local.Nombre:="Embarcacion";
    local.incluye:=0;

    return local;
end;

--Calibration actual
function defDbCalibra: typCalibracion;
local : typCalibracion;
lccd    : integer; --wzero
lccw    : integer; --wspan
wval    : real;    --wval
factor  : real;
begin
    GetLCCW(1,lccd); --span
    GetWVal(1,wval);
    GetLCCD(1,lccw); --zero
    factor:= (lccw-lccd)/wval;
        
    local.WZero:=lccd;
    local.Wval:=wval;
    local.Wspan:=lccw;
    local.Factor:=factor;
    local.FeCal:=Date$(SystemTime) + " - " + Time$(SystemTime);

    return local;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\constants\DefaultDbValues.iri

--Database connections
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\Retro.iri 
 T_Pesaje : PesadasDatabase;
T_Detalle : DetalleDatabase;
T_Embarcacion : EmbarcaDatabase;
T_Especie : EspecieDatabase;
T_Uso : UsoDatabase;
T_Transporte : TransporDatabase;

function GetOldEspecie(id : integer) : string;
begin
    T_Especie.Codigo := id;
    if T_Especie.FindFirst(ESpecie_Codigo) = Sysok then
        return T_Especie.Nombre;
    end if;

    return "";    
end;

function GetOldUso(id : integer) : string;
begin
    T_Uso.Codigo := id;
    if T_Uso.FindFirst(Uso_Codigo) = Sysok then
        return T_Uso.Nombre;
    end if;

    return "";    
end;

function GetOldTransporte(id : integer) : typTransporte;
transporte : typTransporte;
begin
    T_Transporte.Codigo := id;
    if T_Transporte.FindFirst(Transpor_Codigo) = Sysok then
        transporte.Codigo := T_Transporte.Codigo;
        transporte.Nombre:= T_Transporte.Nombre;
        transporte.Incluye := T_Transporte.Incluye;
    end if;

    return transporte;    
end;

function GetOldEmbarcacion(id : string) : string;
begin
    T_Embarcacion.Codigo := id;
    if T_Embarcacion.FindFirst(Transpor_Codigo) = Sysok then
        return T_Embarcacion.Nombre;
    end if;

    return "";    
end;

procedure GetNextPesaje;
begin
    if (T_Pesaje.getNext <> SysOk) then
        T_Pesaje.getFirst;
    end if;
end;

procedure GetPrevPesaje;
begin
    if (T_Pesaje.getPrev <> SysOk) then
        T_Pesaje.getLast;
    end if;
end;

procedure GetNextEmbarca;
begin
    if (T_Embarcacion.getNext <> SysOk) then
        T_Embarcacion.getFirst;
    end if;
end;

procedure GetPrevEmbarca;
begin
    if (T_Embarcacion.getPrev <> SysOk) then
        T_Embarcacion.getLast;
    end if;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\Retro.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbBalanza.iri 
 function GetBalanza : typResponseBalanza;
identifier : integer;
data : typBalanza;
result : typResponseBalanza;
codeResult : SysCode; 
begin
    codeResult := DBExec("Select * from Balanza", identifier);
    Logger("select:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
    if (codeResult = SysOk) then
        if (identifier > 0) then
            Logger("select:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
            DBColumnString(identifier, 2, data.Serie);
            DBColumnString(identifier, 3, data.Modelo);
            DBColumnString(identifier, 1, data.Nombre);
            DBColumnInt(identifier, 4, data.Numero);
            DBColumnString(identifier, 5, data.Flujo);
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function PostBalanza(balanza: typBalanza) : typResponseBalanza;
identifier : integer;
result : typResponseBalanza;
codeResult : SysCode; 
query : string;
begin
    query := "insert into Balanza (Nombre, Serie, Modelo, Numero, Flujo) values (";
    query := query + "'" + balanza.Nombre +"', ";
    query := query + "'" + balanza.Serie +"', ";
    query := query + "'" + balanza.Modelo +"', ";
    query := query + IntegerToString(balanza.Numero,0) +", ";
    query := query + "'" + balanza.Flujo +"')";
    codeResult := DBExec(query, identifier);
    Logger("insert:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
    
    if (codeResult = SysOk) then
        result:= GetBalanza;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg;
        Logger("Balanza DBErrMsg:"+ DBErrMsg);
    
    end if;
    DBFinalize(identifier);
    return result;
end;

function PutBalanza(balanza: typBalanza) : typResponseBalanza;
identifier : integer;
result : typResponseBalanza;
codeResult : SysCode; 
query : string;
begin
    query := "update Balanza set ";
    query := query + "Serie = '"+ balanza.Serie +"', ";
    query := query + "Modelo = '"+ balanza.Modelo +"', ";
    query := query + "Nombre = '"+ balanza.Nombre +"', ";
    query := query + "Numero = "+ IntegerToString(balanza.Numero,0) +", ";
    query := query + "Flujo = '"+ balanza.Flujo +"'";
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result:= GetBalanza;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;


 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbBalanza.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbConfiguracion.iri 
 function GetConfig : typResponseConfiguracion;
identifier : integer;
data : typConfiguracion;
result: typResponseConfiguracion;
codeResult : SysCode; 
begin
    codeResult := DBExec("Select * from Config", identifier);
    if (codeResult = SysOk) then
        if (identifier > 0) then
            DBColumnReal(identifier, 1, data.Objetivo);
            DBColumnReal(identifier, 2, data.Minimo);
            DBColumnReal(identifier, 3, data.Maximo);
            DBColumnReal(identifier, 4, data.TEstabilidad);
            DBColumnReal(identifier, 5, data.TReinicio);
            DBColumnReal(identifier, 6, data.TError1);
            DBColumnReal(identifier, 7, data.TError2);
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function PostConfig(config: typConfiguracion) : typResponseConfiguracion;
identifier : integer;
result : typResponseConfiguracion;
codeResult : SysCode; 
query : string;
begin
    query := "insert into Config (Objetivo, Minimo, Maximo, TEstabil, TRein, TError1, TError2) values (";
    query := query + realtostring(config.Objetivo,0,10) +",";
    query := query + realtostring(config.Minimo,0,10) +",";
    query := query + realtostring(config.Maximo,0,10) +",";
    query := query + realtostring(config.TEstabilidad,0,10) +",";
    query := query + realtostring(config.TReinicio,0,10) +",";
    query := query + realtostring(config.TError1,0,10) +",";
    query := query + realtostring(config.TError2,0,10) +")";
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result:= GetConfig;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function PutConfigObjetivo(config: typConfiguracion) : typResponseConfiguracion;
identifier : integer;
result : typResponseConfiguracion;
codeResult : SysCode; 
query : string;
begin
    query := "update Config set ";
    query := query + "Objetivo = "+ realtostring(config.Objetivo,0,10) +";";
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result:= GetConfig;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function PutConfigPesoMax(config: typConfiguracion) : typResponseConfiguracion;
identifier : integer;
result : typResponseConfiguracion;
codeResult : SysCode; 
query : string;
begin
    query := "update Config set ";
    query := query + "Maximo = "+ realtostring(config.Maximo,0,10) +";";
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result:= GetConfig;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function PutConfigPesoMin(config: typConfiguracion) : typResponseConfiguracion;
identifier : integer;
result : typResponseConfiguracion;
codeResult : SysCode; 
query : string;
begin
    query := "update Config set ";
    query := query + "Minimo = "+ realtostring(config.Minimo,0,10) +";";
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result:= GetConfig;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;


function PutConfigTiempos(config: typConfiguracion) : typResponseConfiguracion;
identifier : integer;
result : typResponseConfiguracion;
codeResult : SysCode; 
query : string;
begin
    query := "update Config set ";
    query := query + "TEstabil = "+ realtostring(config.TEstabilidad,0,10) +", ";
    query := query + "TRein = "+ realtostring(config.TReinicio,0,10) +";";
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result:= GetConfig;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function PutConfigTiempoEstb(config: typConfiguracion) : typResponseConfiguracion;
identifier : integer;
result : typResponseConfiguracion;
codeResult : SysCode; 
query : string;
begin
    query := "update Config set ";
    query := query + "TEstabil = "+ realtostring(config.TEstabilidad,0,10) +";";
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result:= GetConfig;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function PutConfigTiempoRein(config: typConfiguracion) : typResponseConfiguracion;
identifier : integer;
result : typResponseConfiguracion;
codeResult : SysCode; 
query : string;
begin
    query := "update Config set ";
    query := query + "TRein = "+ realtostring(config.TReinicio,0,10) +";";
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result:= GetConfig;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function PutConfigErrores(config: typConfiguracion) : typResponseConfiguracion;
identifier : integer;
result : typResponseConfiguracion;
codeResult : SysCode; 
query : string;
begin
    query := "update Config set ";
    query := query + "TError1 = "+ realtostring(config.TError1,0,10) +",";
    query := query + "TError2 = "+ realtostring(config.TError2,0,10) +";";
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result:= GetConfig;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbConfiguracion.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbEmpresa.iri 
 function GetEmpresa : typResponseEmpresa;
identifier : integer;
data : typEmpresa;
result : typResponseEmpresa;
codeResult : SysCode; 
begin
    codeResult := DBExec("Select * from Empresa", identifier);
    Logger("select emp:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
    if (codeResult = SysOk) then
        if (identifier > 0) then
            Logger("select emp:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
            DBColumnString(identifier, 1, data.Razon);
            DBColumnString(identifier, 2, data.Direccion);
            DBColumnString(identifier, 3, data.RUC);
            DBColumnString(identifier, 4, data.Telefono);
            DBColumnString(identifier, 5, data.EIP);
            DBColumnString(identifier, 6, data.NPL);
            DBColumnInt(identifier, 7, data.Ticket);
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            Logger("ident:"+integertostring(identifier,0));
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
        end if;
    else
        Logger("select emp:"+ syscodetostring(codeResult));
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function PostEmpresa(empresa: typEmpresa) : typResponseEmpresa;
identifier : integer;
result : typResponseEmpresa;
codeResult : SysCode; 
query : string;
begin
    query := "insert into Empresa (Razon, Address, RUC, Telefono, EIP, NPL, Ticket) values (";
    query := query + "'"+ empresa.Razon +"', ";
    query := query + "'"+ empresa.Direccion +"', ";
    query := query + "'"+ empresa.RUC +"', ";
    query := query + "'"+ empresa.Telefono +"', ";
    query := query + "'"+ empresa.EIP +"', ";
    query := query + "'"+ empresa.NPL +"',";
    query := query + IntegerToString(empresa.Ticket, 0) +")";
    codeResult := DBExec(query, identifier);
    Logger("insert:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
    
    if (codeResult = SysOk) then
        result:= GetEmpresa;
    else
        Logger("inserterror:"+ DBErrMsg);
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;


function PutEmpresa(empresa: typEmpresa) : typResponseEmpresa;
identifier : integer;
result : typResponseEmpresa;
codeResult : SysCode; 
query : string;
begin
    query := "update Empresa set ";
    query := query + "Razon = '"+ empresa.Razon +"', ";
    query := query + "Address = '"+ empresa.Direccion +"', ";
    query := query + "RUC = '"+ empresa.RUC +"', ";
    query := query + "Telefono = '"+ empresa.Telefono +"', ";
    query := query + "EIP = "+ empresa.EIP +", ";
    query := query + "NPL = '"+ empresa.NPL +"'";
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        Logger("Update ok:"+ integertostring(identifier,0));
        result:= GetEmpresa;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function PutTicketEmpresa(empresa: typEmpresa) : typResponseEmpresa;
identifier : integer;
result : typResponseEmpresa;
codeResult : SysCode; 
query : string;
begin
    query := "update Empresa set ";
    query := query + "Ticket = "+ IntegerToString(empresa.Ticket, 0);
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        Logger("Update ok:"+ integertostring(identifier,0));
        result:= GetEmpresa;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;
 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbEmpresa.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbEspecie.iri 
 function GetEspecie(id: integer) : typResponseEspecie;
identifier : integer;
data : typEspecie;
result : typResponseEspecie;
codeResult : SysCode; 
begin
    codeResult := DBExec("Select * from Especie where Codigo = " + IntegerToString(id,0), identifier);
    if (codeResult = SysOk) then
        if (identifier > 0) then
            DBColumnInt(identifier, 1, data.codigo);
            DBColumnString(identifier, 2, data.nombre);
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg;
     
    end if;
    DBFinalize(identifier);
    return result;
end;

function ListEspecie : typResponseEspecies;
identifier : integer;
data : typEspecies;
result : typResponseEspecies;
codeResult : SysCode; 
index: integer:= 0;
begin
    codeResult := DBExec("Select * from Especie", identifier);
    if (codeResult = SysOk) then
        if (identifier > 0) then
            while (codeResult = SysOk) 
            loop
                index:=index+1;
                DBColumnInt(identifier, 1, data[index].codigo);
                DBColumnString(identifier, 2, data[index].nombre);
                codeResult:=DBNext(identifier);
            end loop;

            gbTotalEspecie:= index;
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function PostEspecie(Especie: typEspecie) : typResponseEspecie;
identifier : integer;
result : typResponseEspecie;
codeResult : SysCode; 
query : string;
begin
    query := "insert into Especie (Codigo, Nombre) values (";
    query := query + "'"+ integertostring(Especie.codigo,0) +"', ";
    query := query + "'"+ Especie.Nombre +"')";
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result:= GetEspecie(Especie.codigo);
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;


function PutEspecie(Especie: typEspecie) : typResponseEspecie;
identifier : integer;
result : typResponseEspecie;
codeResult : SysCode; 
query : string;
begin
    query := "update Especie set ";
    query := query + " Nombre = '"+ Especie.Nombre +"'";
    query := query + " where Codigo = "+ IntegerToString(Especie.codigo,0);
    codeResult := DBExec(query, identifier);
    Logger("put transport:" + syscodetostring(codeResult) +"-ident:"+ integertostring(identifier, 0));
    
    if (codeResult = SysOk) then
        result:= GetEspecie(Especie.codigo);
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("error especie:" + DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;

function DeleteEspecie(Especie: typEspecie) : typResponseEspecie;
identifier : integer;
result : typResponseEspecie;
codeResult : SysCode; 
query : string;
begin
    query := "delete from Especie ";
    query := query + " where Codigo = "+ IntegerToString(Especie.codigo,0);
    codeResult := DBExec(query, identifier);
    Logger("delete Especie:" + syscodetostring(codeResult) +"-ident:"+ integertostring(identifier, 0));
    
    if (codeResult = SysOk) then
        result.HasError := BoolFalse;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("error especie:" + DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;
 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbEspecie.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbUso.iri 
 function GetUso(id: integer) : typResponseUso;
identifier : integer;
data : typUso;
result : typResponseUso;
codeResult : SysCode; 
begin
    codeResult := DBExec("Select * from Uso where Codigo = " + IntegerToString(id,0), identifier);
    if (codeResult = SysOk) then
        if (identifier > 0) then
            DBColumnInt(identifier, 1, data.codigo);
            DBColumnString(identifier, 2, data.nombre);
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function ListUso : typResponseUsos;
identifier : integer;
data : typUsos;
result : typResponseUsos;
codeResult : SysCode; 
index: integer:= 0;
begin
    codeResult := DBExec("Select * from Uso", identifier);
    if (codeResult = SysOk) then
        if (identifier > 0) then
            while (codeResult = SysOk) 
            loop
                index:=index+1;
                DBColumnInt(identifier, 1, data[index].codigo);
                DBColumnString(identifier, 2, data[index].nombre);
                codeResult:=DBNext(identifier);
            end loop;

            gbTotalUso:= index;
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function PostUso(Uso: typUso) : typResponseUso;
identifier : integer;
result : typResponseUso;
codeResult : SysCode; 
query : string;
begin
    query := "insert into Uso (Codigo, Nombre) values (";
    query := query + "'"+ integertostring(Uso.codigo,0) +"', ";
    query := query + "'"+ Uso.Nombre +"') ";
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result:= GetUso(Uso.codigo);
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;


function PutUso(Uso: typUso) : typResponseUso;
identifier : integer;
result : typResponseUso;
codeResult : SysCode; 
query : string;
begin
    query := "update Uso set ";
    query := query + "Nombre = '"+ Uso.Nombre +"'";
    query := query + " where Codigo = "+ IntegerToString(Uso.codigo,0);
    codeResult := DBExec(query, identifier);
    Logger("put Uso:" + syscodetostring(codeResult) +"-ident:"+ integertostring(identifier, 0));
    
    if (codeResult = SysOk) then
        result:= GetUso(Uso.codigo);
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("error Uso:" + DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;

function DeleteUso(Uso: typUso) : typResponseUso;
identifier : integer;
result : typResponseUso;
codeResult : SysCode; 
query : string;
begin
    query := "delete from Uso ";
    query := query + " where Codigo = "+ IntegerToString(Uso.codigo,0);
    codeResult := DBExec(query, identifier);
    Logger("delete Uso:" + syscodetostring(codeResult) +"-ident:"+ integertostring(identifier, 0));
    
    if (codeResult = SysOk) then
        result.HasError := BoolFalse;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("error Uso:" + DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbUso.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbEmbarcacion.iri 
 function GetNextId : integer;
identifier : integer;
nextId : integer;
codeResult : SysCode; 
begin
    codeResult := DBExec("select ifnull(max(id), 0) + 1 from Embarca", identifier);
    if (codeResult = SysOk) then
        if (identifier > 0) then
            DBColumnInt(identifier, 1, nextId);
        else
            nextId := 0;
        end if;
    else
        nextId := 0; 
    end if;
    DBFinalize(identifier);
    return nextId;
end;

function GetEmbarcacion(id: string) : typResponseEmbarcacion;
identifier : integer;
data : typEmbarcacion;
result : typResponseEmbarcacion;
codeResult : SysCode; 
begin
    codeResult := DBExec("Select * from Embarca where Codigo = '" + id + "'", identifier);
    if (codeResult = SysOk) then
        if (identifier > 0) then
            DBColumnInt(identifier, 1, data.Id);
            DBColumnstring(identifier, 2, data.codigo);
            DBColumnString(identifier, 3, data.nombre);
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function ListEmbarcacion : typResponseEmbarcaciones;
identifier : integer;
data : typEmbarcaciones;
result : typResponseEmbarcaciones;
codeResult : SysCode; 
index: integer:= 0;
begin
    codeResult := DBExec("Select * from Embarca", identifier);
    Logger("list emb:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
    if (codeResult = SysOk) then
        if (identifier > 0) then
            while (codeResult = SysOk) 
            loop
                index:=index+1;
                Logger("loop index:" + integertostring(index, 0));
                DBColumnInt(identifier, 1, data[index].Id);
                DBColumnString(identifier, 2, data[index].codigo);
                DBColumnString(identifier, 3, data[index].nombre);
                codeResult:=DBNext(identifier);
                Logger("list emb next:"+ syscodetostring(codeResult) + "- index: " + integertostring(index, 0));
            end loop;
            
            gbTotalEmbarca:= index;
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
            Logger("list emb: no Data");
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("select embDBErrMsg:"+ DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;

function PostEmbarcacion(Embarcacion: typEmbarcacion) : typResponseEmbarcacion;
identifier : integer;
result : typResponseEmbarcacion;
codeResult : SysCode; 
query : string;
id : integer;
begin
    id := GetNextId;
    query := "insert into Embarca (Id, Codigo, Nombre) values (";
    query := query + IntegerToString(id, 0) +", ";
    query := query + "'"+ Embarcacion.codigo +"', ";
    query := query + "'"+ Embarcacion.Nombre +"')";
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result:= GetEmbarcacion(Embarcacion.codigo);
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;


function PutEmbarcacion(Embarcacion: typEmbarcacion) : typResponseEmbarcacion;
identifier : integer;
result : typResponseEmbarcacion;
codeResult : SysCode; 
query : string;
begin
    query := "update Embarca set ";
    query := query + "Nombre = '"+ Embarcacion.Nombre +"', ";
    query := query + "Codigo = '"+ Embarcacion.codigo +"'";
    query := query + " where Id = "+ IntegerToString(Embarcacion.Id, 0);
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result:= GetEmbarcacion(Embarcacion.codigo);
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;


function DeleteEmbarcacion(Embarcacion: typEmbarcacion) : typResponseEmbarcacion;
identifier : integer;
result : typResponseEmbarcacion;
codeResult : SysCode; 
query : string;
begin
    query := "delete from Embarca ";
    query := query + " where Id = "+ IntegerToString(Embarcacion.Id, 0);
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result.HasError := BoolFalse; 
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;
 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbEmbarcacion.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbTransporte.iri 
 function GetTransporte(id: integer) : typResponseTransporte;
identifier : integer;
data : typTransporte;
result : typResponseTransporte;
codeResult : SysCode; 
begin
    codeResult := DBExec("Select * from Transpor where Codigo = " + IntegerToString(id,0), identifier);
    if (codeResult = SysOk) then
        if (identifier > 0) then
            DBColumnInt(identifier, 1, data.codigo);
            DBColumnString(identifier, 2, data.nombre);
            DBColumnInt(identifier, 3, data.incluye);
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function ListTransporte : typResponseTransportes;
identifier : integer;
data : typTransportes;
result : typResponseTransportes;
codeResult : SysCode; 
index: integer:= 0;
begin
    codeResult := DBExec("Select * from Transpor", identifier);
    Logger("select transport:" + syscodetostring(codeResult) +"-ident:"+ integertostring(identifier, 0));
    if (codeResult = SysOk) then
        if (identifier > 0) then
            while (codeResult = SysOk) 
            loop
                index:=index+1;
                DBColumnInt(identifier, 1, data[index].codigo);
                DBColumnString(identifier, 2, data[index].nombre);
                DBColumnInt(identifier, 3, data[index].incluye);
                codeResult:=DBNext(identifier);
            end loop;

            gbTotalTransporte:= index;
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("error transport:" + DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;

function PostTransporte(Transporte: typTransporte) : typResponseTransporte;
identifier : integer;
result : typResponseTransporte;
codeResult : SysCode; 
query : string;
begin
    query := "insert into Transpor (Codigo, Nombre, Incluye) values (";
    query := query + "'"+ integertostring(Transporte.codigo,0) +"', ";
    query := query + "'"+ Transporte.Nombre +"',";
    query := query + integertostring(Transporte.incluye,0) +")";
    codeResult := DBExec(query, identifier);
    Logger("insert transport:" + syscodetostring(codeResult) +"-ident:"+ integertostring(identifier, 0));
    if (codeResult = SysOk) then
        result:= GetTransporte(Transporte.codigo);
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("error transport:" + DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;


function PutTransporte(Transporte: typTransporte) : typResponseTransporte;
identifier : integer;
result : typResponseTransporte;
codeResult : SysCode; 
query : string;
begin
    query := "update Transpor set ";
    query := query + "Nombre = '"+ Transporte.Nombre +"', ";
    query := query + "Incluye = "+ IntegerToString(Transporte.Incluye,0) +" ";
    query := query + "where Codigo = "+ IntegerToString(Transporte.codigo,0);
    codeResult := DBExec(query, identifier);
    Logger("put transport:" + syscodetostring(codeResult) +"-ident:"+ integertostring(identifier, 0));
    
    if (codeResult = SysOk) then
        result:= GetTransporte(Transporte.codigo);
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("error transport:" + DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;


function DeleteTransporte(Transporte: typTransporte) : typResponseTransporte;
identifier : integer;
result : typResponseTransporte;
codeResult : SysCode; 
query : string;
begin
    query := "delete from Transpor ";
    query := query + "where Codigo = "+ IntegerToString(Transporte.codigo,0);
    codeResult := DBExec(query, identifier);
    Logger("delete transport:" + syscodetostring(codeResult) +"-ident:"+ integertostring(identifier, 0));
    
    if (codeResult = SysOk) then
        result.HasError := BoolFalse;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("error transport:" + DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;
 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbTransporte.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbCalibracion.iri 
 function GetCalibracion : typResponseCalibracion;
identifier : integer;
data : typCalibracion;
result : typResponseCalibracion;
codeResult : SysCode; 
begin
    codeResult := DBExec("Select * from Calibra", identifier);
    Logger("select Calibra:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
    if (codeResult = SysOk) then
        if (identifier > 0) then
            Logger("select Calibra:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
            DBColumnInt(identifier, 1, data.Wzero);
            DBColumnReal(identifier, 2, data.Wval);
            DBColumnInt(identifier, 2, data.Wspan);
            DBColumnReal(identifier, 3, data.Factor);
            DBColumnString(identifier, 4, data.FeCal);
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("error transport:" + DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;

function PostCalibracion(Calibracion: typCalibracion) : typResponseCalibracion;
identifier : integer;
result : typResponseCalibracion;
codeResult : SysCode; 
query : string;
begin
    query := "insert into Calibra (Wzero, Wval, Wspan, Factor, FeCal) values (";
    query := query + IntegerToString(Calibracion.Wzero,0) +", ";
    query := query + RealToString(Calibracion.Wval, 0, 8) +", ";
    query := query + IntegerToString(Calibracion.Wspan,0) +", ";
    query := query + RealToString(Calibracion.Factor,0, 8) +", ";
    query := query + "'"+ Calibracion.FeCal +"')";
    codeResult := DBExec(query, identifier);
    Logger("insert Calibra:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
    
    if (codeResult = SysOk) then
        result:= GetCalibracion;
    else
        Logger("inserterror:"+ DBErrMsg);
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("error transport:" + DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;


function PutCalibracion(Calibracion: typCalibracion) : typResponseCalibracion;
identifier : integer;
result : typResponseCalibracion;
codeResult : SysCode; 
query : string;
begin
    query := "update Calibra set ";
    query := query + "Wzero = "+ IntegerToString(Calibracion.Wzero, 0) +", ";
    query := query + "Wval = "+ RealToString(Calibracion.Wval, 0, 8) +", ";
    query := query + "Wspan = "+ IntegerToString(Calibracion.Wspan, 0) +", ";
    query := query + "Factor = "+ RealToString(Calibracion.Factor, 0, 8) +", ";
    query := query + "FeCal = '"+ Calibracion.FeCal +"'";
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result:= GetCalibracion;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("error transport:" + DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;

function PutFechaCalibracion(fecha: string) : typResponseCalibracion;
identifier : integer;
result : typResponseCalibracion;
codeResult : SysCode; 
query : string;
begin
    query := "update Calibra set ";
    query := query + "FeCal = '"+ fecha +"'";
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result:= GetCalibracion;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("error calibra:" + DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;
 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbCalibracion.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbRecupera.iri 
 -- function GetRecupera : typResponseRecupera;
-- identifier : integer;
-- data : typRecupera;
-- result : typResponseRecupera;
-- codeResult : SysCode; 
-- query : string;
-- begin
    
--     query := "Select t1.ticket, t1.codEmbar, t2.Nombre as nomEmbar, ";
--     query := query + "t1.codEspec, t3.Nombre as nomEspecie, t1.codUso, t4.Nombre as nomUso, ";
--     query := query + "t1.codTrans, t5.Nombre as nomTrans, t5.incluye, ";
--     query := query + "t1.fInicio, t1.batch, t1.acumula, t1.estado, t1.eventos, t1.wzero, ";
--     query := query + "t1.wspan, t1.wval, t1.factor, t1.objetivo ";
--     query := query + "from Recupera t1 ";
--     query := query + "left join Embarca t2 on t1.codEmbar = t2.Codigo ";
--     query := query + "left join Especie t3 on t1.codEspec = t3.Codigo ";
--     query := query + "left join Uso t4 on t1.codUso = t4.Codigo ";
--     query := query + "left join Transpor t5 on t1.codTrans = t5.Codigo ";
--     codeResult := DBExec(query, identifier);
--     if (codeResult = SysOk) then
--         if (identifier > 0) then
--             Logger("select recupera:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
--             DBColumnInt(identifier, 1, data.ticket);
--             DBColumnString(identifier, 2, data.codEmbarca);
--             DBColumnString(identifier, 3, data.nomEmbarca);
--             DBColumnInt(identifier, 4, data.codEspecie);
--             DBColumnString(identifier, 5, data.nomEspecie);
--             DBColumnInt(identifier, 6, data.codUso);
--             DBColumnString(identifier, 7, data.nomUso);
--             DBColumnInt(identifier, 8, data.codTransporte);
--             DBColumnString(identifier, 9, data.nomTransporte);
--             DBColumnInt(identifier, 10, data.incluyeTransporte);
--             DBColumnDT(identifier, 11, data.fecInicio);
--             DBColumnInt(identifier, 12, data.batch);
--             DBColumnReal(identifier, 13, data.acumulado);
--             DBColumnInt(identifier, 14, data.estado);
--             DBColumnInt(identifier, 15, data.eventos);
--             DBColumnInt(identifier, 16, data.wzero);
--             DBColumnInt(identifier, 17, data.wspan);
--             DBColumnReal(identifier, 18, data.wval);
--             DBColumnReal(identifier, 19, data.factor);
--             DBColumnReal(identifier, 20, data.objetivo);

--             Logger("select recupera incluye: ->"+integertostring(data.incluyeTransporte,0));

--             result.HasError := BoolFalse;
--             result.HasData := BoolTrue;
--             result.data := data;
--         else
--             result.HasError := BoolFalse;
--             result.HasData := BoolFalse;
--         end if;
--     else
--         result.HasError := BoolTrue;
--         result.ErrorMessage := DBErrMsg; 
--         Logger("DBErrMsg recupera:"+ DBErrMsg);
--     end if;
--     DBFinalize(identifier);
--     return result;
-- end;

-- function PostRecupera(Recupera: typRecupera) : typResponseRecupera;
-- identifier : integer;
-- result : typResponseRecupera;
-- codeResult : SysCode; 
-- query : string;
-- begin
--     query := query + "insert into Recupera ";
--     query := query + "(ticket, codEmbar, codEspec, codUso, codTrans, ";
--     query := query + "fInicio, batch, acumula, estado, eventos, wzero, ";
--     query := query + "wspan, wval, factor, objetivo) values (";
--     query := query + IntegerToString(Recupera.ticket, 0) +", ";
--     query := query + "'" + Recupera.codEmbarca +"', ";
--     query := query + IntegerToString(Recupera.codEspecie, 0) +", ";
--     query := query + IntegerToString(Recupera.codUso, 0) +", ";
--     query := query + IntegerToString(Recupera.codTransporte, 0) +", ";
--     query := query + DTToString(Recupera.fecInicio) +",";
--     query := query + IntegerToString(Recupera.batch, 0) +", ";
--     query := query + RealToString(Recupera.acumulado, 0, 10) +", ";
--     query := query + IntegerToString(Recupera.estado, 0) +", ";
--     query := query + IntegerToString(Recupera.eventos, 0) +", ";
--     query := query + IntegerToString(Recupera.wzero, 0) +",";
--     query := query + IntegerToString(Recupera.wspan, 0) +", ";
--     query := query + RealToString(Recupera.wval, 0, 10) +", ";
--     query := query + RealToString(Recupera.factor, 0, 10) +", ";
--     query := query + RealToString(Recupera.objetivo, 0, 10) +")";
--     codeResult := DBExec(query, identifier);
--     Logger("insert recupera:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
--     Logger("insert recupera codtranspo:"+integertostring(Recupera.codTransporte,0));
    
--     if (codeResult = SysOk) then
--         result:= GetRecupera;
--     else
--         result.HasError := BoolTrue;
--         result.ErrorMessage := DBErrMsg;
--         Logger("Recupera DBErrMsg:"+ DBErrMsg);
    
--     end if;
--     DBFinalize(identifier);
--     return result;
-- end;


-- function PutRecupera(Recupera: typRecupera) : typResponseRecupera;
-- identifier : integer;
-- result : typResponseRecupera;
-- codeResult : SysCode; 
-- query : string;
-- begin
--     query := query + "update Recupera set ";
--     query := query + "ticket = " + IntegerToString(Recupera.ticket, 0) +", ";
--     query := query + "codEmbar = '" + Recupera.codEmbarca +"', ";
--     query := query + "codEspec = " + IntegerToString(Recupera.codEspecie, 0) +", ";
--     query := query + "codUso = "+IntegerToString(Recupera.codUso, 0) +", ";
--     query := query + "codTrans = "+ IntegerToString(Recupera.codTransporte, 0) +", ";
--     query := query + "fInicio = "+ DTToString(Recupera.fecInicio) +",";
--     query := query + "batch = "+ IntegerToString(Recupera.batch, 0) +", ";
--     query := query + "acumula = "+ RealToString(Recupera.acumulado, 0, 10) +", ";
--     query := query + "estado = " + IntegerToString(Recupera.estado, 0) +", ";
--     query := query + "eventos = " + IntegerToString(Recupera.eventos, 0) +", ";
--     query := query + "wzero = " + IntegerToString(Recupera.wzero, 0) +",";
--     query := query + "wspan = " + IntegerToString(Recupera.wspan, 0) +", "; 
--     query := query + "wval = " + RealToString(Recupera.wval, 0, 10) +", ";
--     query := query + "factor = " + RealToString(Recupera.factor, 0, 10) +", ";
--     query := query + "objetivo = " + RealToString(Recupera.objetivo, 0, 10);
--     codeResult := DBExec(query, identifier);
--     Logger("update recupera:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
    
--     if (codeResult = SysOk) then
--         result:= GetRecupera;
--     else
--         result.HasError := BoolTrue;
--         result.ErrorMessage := DBErrMsg;
--         Logger("Recupera DBErrMsg:"+ DBErrMsg);
    
--     end if;
--     DBFinalize(identifier);
--     return result;
-- end;

-- function PutRecuperaEstado(estado : integer) : typResponseRecupera;
-- identifier : integer;
-- result : typResponseRecupera;
-- codeResult : SysCode; 
-- query : string;
-- begin
--     query := "update Recupera set Estado = "+ IntegerToString(estado, 0);
--     codeResult := DBExec(query, identifier);
    
--     if (codeResult = SysOk) then
--         result.HasError := BoolFalse;
--     else
--         result.HasError := BoolTrue;
--         result.ErrorMessage := DBErrMsg; 
--         Logger("Recupera put estado DBErrMsg:"+ DBErrMsg);
--     end if;
--     DBFinalize(identifier);
--     return result;
-- end;


-- function PutRecuperaPeso(batch : integer; acumulado : real; estado : integer) : typResponseRecupera;
-- identifier : integer;
-- result : typResponseRecupera;
-- codeResult : SysCode; 
-- query : string;
-- begin
--     query := "update Recupera set ";
--     query := query + "batch = "+ integertostring(batch, 0) +", ";
--     query := query + "acumula = "+ realtostring(acumulado, 0, 8) +", ";
--     query := query + "estado = "+ integertostring(estado, 0);
--     codeResult := DBExec(query, identifier);
    
--     if (codeResult = SysOk) then
--         result.HasError := BoolFalse;
--     else
--         result.HasError := BoolTrue;
--         result.ErrorMessage := DBErrMsg; 
--     end if;
--     DBFinalize(identifier);
--     return result;
-- end;


procedure CleanRecupera;
begin
    gbRecupera.ticket := 0;
    gbRecupera.codEmbarca   := "";
    gbRecupera.nomEmbarca   := "";
    gbRecupera.codEspecie  := 0;
    gbRecupera.nomEspecie  := "";
    gbRecupera.codUso := 0;
    gbRecupera.nomUso := "";
    gbRecupera.codTransporte := 0;
    gbRecupera.nomTransporte := "";
    gbRecupera.incluyeTransporte := 0;
    gbRecupera.fecInicio := systemtime;
    gbRecupera.batch:= 0;
    gbRecupera.acumulado:= 0;
    gbRecupera.estado:= 0;
    gbRecupera.eventos:= 0;
    gbRecupera.wzero:= 0;
    gbRecupera.wspan:= 0;
    gbRecupera.wval:= 0;
    gbRecupera.factor:= 0;
    gbRecupera.objetivo:= 0;
    gbRecupera.iniciado := BoolFalse;
end;

 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbRecupera.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbAlerta.iri 
 function GetAlerta(id: integer) : typResponseAlerta;
identifier : integer;
data : typAlerta;
result : typResponseAlerta;
codeResult : SysCode;
query : string; 
begin
    query := "Select t1.Ticket, t1.Orden, t1.fecha, t1.codTipo, t2.Nombre ";
    query := query +" from Alerta t1";
    query := query +" left join TipoAler t2 on t2.codigo = t1.codTipo";
    query := query +"where t1.Ticket =";
    codeResult := DBExec(query + IntegerToString(id, 0), identifier);
    if (codeResult = SysOk) then
        if (identifier > 0) then
            DBColumnInt(identifier, 1, data.Ticket);
            DBColumnInt(identifier, 2, data.Orden);
            DBColumndt(identifier, 3, data.Fecha);
            DBColumnInt(identifier, 4, data.idTipoAlerta);
            DBColumnstring(identifier, 5, data.TipoAlerta);
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function ListAlerta(id: integer) : typResponseAlertas;
identifier : integer;
data : typAlertas;
result : typResponseAlertas;
codeResult : SysCode; 
index: integer:= 0;
query : string;
begin
    query := "Select t1.Ticket, t1.Orden, t1.fecha, t1.codTipo, t2.Nombre ";
    query := query +" from Alerta t1";
    query := query +" left join TipoAler t2 on t2.codigo = t1.codTipo";
    query := query +"where t1.Ticket =";
    codeResult := DBExec(query+ IntegerToString(id, 0), identifier);
    Logger("list pesa:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
    if (codeResult = SysOk) then
        if (identifier > 0) then
            while (codeResult = SysOk) 
            loop
                index:=index+1;
                Logger("loop index:" + integertostring(index, 0));
                DBColumnInt(identifier, 1, data[index].Ticket);
                DBColumnInt(identifier, 2, data[index].Orden);
                DBColumndt(identifier, 3, data[index].Fecha);
                DBColumnInt(identifier, 4, data[index].idTipoAlerta);
                DBColumnstring(identifier, 5, data[index].TipoAlerta);
                codeResult:=DBNext(identifier);
                Logger("list pesa next:"+ syscodetostring(codeResult) + "- index: " + integertostring(index, 0));
            end loop;
            
            result.Count:= index;
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
            Logger("list emb: no Data");
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("select embDBErrMsg:"+ DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;


function ListAlertaGroupByTipo(id: integer) : typResponseAlertas;
identifier : integer;
data : typAlertas;
result : typResponseAlertas;
codeResult : SysCode; 
index: integer:= 0;
query : string;
begin
    query := "Select t2.Nombre, count(1) ";
    query := query +" from Alerta t1";
    query := query +" left join TipoAler t2 on t2.codigo = t1.codTipo";
    query := query +" where t1.Ticket =" + IntegerToString(id, 0);
    query := query +" group by t2.Nombre order by t2.Nombre";
    
    codeResult := DBExec(query, identifier);
    Logger("list pesa:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
    if (codeResult = SysOk) then
        if (identifier > 0) then
            while (codeResult = SysOk) 
            loop
                index:=index+1;
                Logger("loop index:" + integertostring(index, 0));
                DBColumnstring(identifier, 1, data[index].TipoAlerta);
                DBColumnInt(identifier, 2, data[index].Cantidad);
                codeResult:=DBNext(identifier);
                Logger("list pesa next:"+ syscodetostring(codeResult) + "- index: " + integertostring(index, 0));
            end loop;
            
            result.Count:= index;
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
            Logger("list emb: no Data");
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("select embDBErrMsg:"+ DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;

function PostAlerta(Alerta: typAlerta) : typResponseAlerta;
identifier : integer;
result : typResponseAlerta;
codeResult : SysCode; 
query : string;
begin
    query := "Insert into Alerta (Ticket, Orden, fecha, codTipo) values (";
    query := query + IntegerToString(Alerta.Ticket,0) +", ";
    query := query + IntegerToString(Alerta.Orden, 0) +", ";
    query := query + DTToString(Alerta.fecha) +", ";
    query := query + IntegerToString(Alerta.idTipoAlerta, 0) +")";
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result:= GetAlerta(Alerta.ticket);
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;
 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbAlerta.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbTicketEmbarca.iri 
 function ListTicketEmbarca(ticket : integer) : typResponseTicketEmbarcas;
identifier : integer;
data : typTicketEmbarcas;
result : typResponseTicketEmbarcas;
codeResult : SysCode; 
index: integer:= 0;
query : string;
begin
    query := "Select t2.codigo, t2.Nombre, t1.fecha ";
    query := query +" from TicketEm t1";
    query := query +" left join Embarca t2 on t2.codigo = t1.codEmbar";
    query := query +" where t1.Ticket = " + IntegerToString(ticket, 0);
    query := query +" order by t1.fecha";
    codeResult := DBExec(query, identifier);
    Logger("list asocia:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));

    DisplayStatus("Res:"+SysCodeToString(codeResult)+"Id:"+integertostring(identifier,0)+"--ErDb:" + DBErrMsg);
    ProgramDelay(300);
    
    if (codeResult = SysOk) then
        if (identifier > 0) then
            while (codeResult = SysOk) 
            loop
                index:=index+1;
                Logger("loop asocia index:" + integertostring(index, 0));
                DBColumnString(identifier, 1, data[index].codEmbar);
                DBColumnstring(identifier, 2, data[index].Embarcacion);
                DBColumnDT(identifier, 3, data[index].fecha);
                codeResult:=DBNext(identifier);
                Logger("list asocia next:"+ syscodetostring(codeResult) + "- index: " + integertostring(index, 0));
            end loop;
            
            result.Count:= index;
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
            Logger("list asocia: no Data");
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("select embDBErrMsg:"+ DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;

procedure FreeTableSpace;
identifier : integer;
query : string;
codeResult : SysCode;
total : integer;
begin
    query := "Select count(1) ";
    query := query +" from TicketEm";
    codeResult := DBExec(query, identifier);
    
    DisplayStatus("FREE1-Res:"+SysCodeToString(codeResult)+"Id:"+integertostring(identifier,0)+"--ErDb:" + DBErrMsg);
    ProgramDelay(200);
    

    if (codeResult = SysOk) then return; end if;
    if (identifier = 0) then return; end if;
    
    DBColumnInt(identifier, 1, total);
    DBFinalize(identifier);
    
    DisplayStatus("FREE-Total:"+integertostring(total,0));
    ProgramDelay(300);

    if (total < CONST_MAX_TICKETEMB) then return; end if;

    query := "delete from TicketEm where ticket = (Select ticket from TicketEm order by fecha asc limit 1)";
    codeResult := DBExec(query, identifier);

    DisplayStatus("FREE2-Res:"+SysCodeToString(codeResult)+"Id:"+integertostring(identifier,0)+"--ErDb:" + DBErrMsg);
    ProgramDelay(200);
    DBFinalize(identifier);
end;

function PostTicketEmbarca(TicketEmbarca: typTicketEmbarca) : typResponseTicketEmbarca;
identifier : integer;
result : typResponseTicketEmbarca;
codeResult : SysCode; 
query : string;
fecha : datetime;
begin
    FreeTableSpace;
    fecha := systemtime;
    query := "Insert into TicketEm (Ticket, codEmbar, fecha) values (";
    query := query + IntegerToString(TicketEmbarca.ticket,0) +", ";
    query := query + "'" + TicketEmbarca.codEmbar + "', ";
    query := query + DTToString(fecha) +") ";
    codeResult := DBExec(query, identifier);
    Logger("insert TicketEm:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
    DisplayStatus("Res:"+SysCodeToString(codeResult)+"--ErDb:" + DBErrMsg);
    ProgramDelay(300);
    
    if (codeResult = SysOk) then
        result.HasError := BoolFalse;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("select TicketEm DBErrMsg:"+ DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;
 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbTicketEmbarca.iri

--Impresion directa de bd
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\printer\CopyTicketRetro.iri 
 procedure PrinterHeaderMultiTicketRetro;
begin
    
    SendToUSBPrinterLn("       REPORTE DE PESAJES");  
    SendToUSBPrinterLn("========================================"); 
    SendToUSBPrinterLn(gbEmpresa.Razon);  
    SendToUSBPrinterLn(gbEmpresa.Direccion);  
    SendToUSBPrinterLn("RUC : "+ gbEmpresa.RUC);      
    SendToUSBPrinterLn("Tlf.: "+ gbEmpresa.Telefono);     
    SendToUSBPrinterLn("========================================"); 
end;

procedure PrinterSummaryRetro;
transporte : typTransporte;
especie : string;
uso : string;
embarca : string;
begin
    transporte := GetOldTransporte(T_Pesaje.codTrans);
    especie := GetOldEspecie(T_Pesaje.codEspec);
    uso := GetOldUso(T_Pesaje.codUso);
    embarca := GetOldEmbarcacion(T_Pesaje.codEmbar);
    SendToUSBPrinter("Nro. TOLVA: "+IntegerToString(gbBalanza.Numero,0));   
    SendToUSBPrinterLn("REPORTE: "+ IntegerToString(T_Pesaje.ticket, 0));
    SendToUSBPrinter(transporte.Nombre + ":");   
    if (transporte.incluye = 1) then
    SendToUSBPrinterLn(T_Pesaje.codEmbar);                           
    else
    SendToUSBPrinterLn(embarca + "-" + T_Pesaje.codEmbar);                           
    end if;
    SendToUSBPrinterLn(especie + " - " + uso);
    SendToUSBPrinterLn("INICIO : "+ Date$(T_Pesaje.FechaIni) + " " + Time$(T_Pesaje.FechaIni));  --19:58                   
    SendToUSBPrinter("WZERO: "+RealToString(T_Pesaje.wzero,0,0)); --1500 Kg.
    SendToUSBPrinterLn("WSPAN: "+RealToString(T_Pesaje.wspan,0,0)); --1500 Kg.
    SendToUSBPrinter("WVAL: "+RealToString(T_Pesaje.wval,0,2)); --1500 Kg.
    SendToUSBPrinterLn("FACTOR: "+RealToString(T_Pesaje.factor,0,2)); --1500 Kg.
    SendToUSBPrinter("ACUM: "+Redondea(T_Pesaje.Acum)+" Tn.");      --   3175 Kg.
    SendToUSBPrinterLn("BATCHS : "+IntegerToString(T_Pesaje.Batch,0));    -- 3
    SendToUSBPrinterLn("TERMINO: "+Date$(T_Pesaje.FechaFin) +" " + Time$(T_Pesaje.FechaFin));  --20:01       
end;     

procedure PrinterCopyHeaderRetro;
suma1   : real;
suma2   : real;
i   : integer;
transporte : typTransporte;
especie : string;
uso : string;
embarca : string;
begin
    transporte := GetOldTransporte(T_Pesaje.codTrans);
    especie := GetOldEspecie(T_Pesaje.codEspec);
    uso := GetOldUso(T_Pesaje.codUso);
    embarca := GetOldEmbarcacion(T_Pesaje.codEmbar);
    SendToUSBPrinterLn("========================================"); 
    SendToUSBPrinterLn("       COPIA DE TICKET DE REPORTE");  
    SendToUSBPrinterLn("========================================"); 
    SendToUSBPrinterLn(" ");
    SendToUSBPrinterLn("****************************************"); 
    SendToUSBPrinterLn("**        LOS PESAJES Y EVENTOS       **");
    SendToUSBPrinterLn("**   CORRESPONDIENTES A ESTE TICKET   **");
    SendToUSBPrinterLn("**      PUEDEN NO ESTAR COMPLETOS     **");
    SendToUSBPrinterLn("****************************************"); 
    SendToUSBPrinterLn(" ");   
    SendToUSBPrinterLn(gbEmpresa.Razon);  
    SendToUSBPrinterLn(gbEmpresa.Direccion);  
    SendToUSBPrinterLn("RUC : "+ gbEmpresa.RUC);      
    SendToUSBPrinterLn("Tlf.: "+ gbEmpresa.Telefono);     
    SendToUSBPrinterLn(" ");
    SendToUSBPrinterLn("Nro. TOLVA      : "+IntegerToString(gbBalanza.Numero,0));   
    SendToUSBPrinterLn("CAPACIDAD       : "+ IntegerToString(gbConfig.Maximo,0)+" Kg");   
    SendToUSBPrinterLn("MARCA           : RICE LAKE");
    SendToUSBPrinterLn("                  WEIGHING SYSTEMS");               
    SendToUSBPrinterLn("========================================"); 
    SendToUSBPrinterLn("       COPIA DE TICKET DE REPORTE");  
    SendToUSBPrinterLn("========================================");    
    SendToUSBPrinterLn("SERIE BALANZA   : "+ Left$(gbBalanza.serie + Space$(11), 11));       
    SendToUSBPrinterLn("MODELO          : "+ gbBalanza.Modelo);                                        
    SendToUSBPrinterLn("REPORTE RECEP.  : "+ IntegerToString(T_Pesaje.ticket,0) + "-" + IntegerToString(T_Pesaje.Anio, 0));
    SendToUSBPrinterLn("TIPO TRANSPORTE : "+ transporte.Nombre);   
    if (transporte.incluye = 1) then
    SendToUSBPrinterLn("PLACA VEHICLAR  : "+ T_Pesaje.codEmbar);                           
    else
    SendToUSBPrinterLn("EMBARCACION     : "+ embarca);                             
    SendToUSBPrinterLn("MATRICULA       : "+ T_Pesaje.codEmbar);                           
    end if;
    SendToUSBPrinterLn("ESPECIE         : "+ especie); --ANCHOVETA   
    --SendToUSBPrinterLn("PROVEEDOR       : "+ T_Pesaje.Prove);                            
    SendToUSBPrinterLn("TIPO DE USO     : "+ uso); -- CONSERVA                         
    SendToUSBPrinterLn("FECHA DE INICIO : "+ Date$(T_Pesaje.FechaIni));  -- 14/03/2000                           
    SendToUSBPrinterLn("HORA DE INICIO  : "+ Time$(T_Pesaje.FechaIni));  --19:58                   
    SendToUSBPrinterLn("========================================"); 
    SendToUSBPrinterLn("       COPIA DE TICKET DE REPORTE");  
    SendToUSBPrinterLn("========================================");    
    SendToUSBPrinterLn("PESO POR BATCH  : "+RealToString(gbConfig.Objetivo,0,2)+"kg."); --1500 Kg.
    SendToUSBPrinterLn("WZERO           : "+RealToString(T_Pesaje.wzero,0,0)); --1500 Kg.
    SendToUSBPrinterLn("WSPAN           : "+RealToString(T_Pesaje.wspan,0,0)); --1500 Kg.
    SendToUSBPrinterLn("WVAL            : "+RealToString(T_Pesaje.wval,0,2)); --1500 Kg.
    SendToUSBPrinterLn("FACTOR          : "+RealToString(T_Pesaje.factor,0,2)); --1500 Kg.
    SendToUSBPrinterLn("========================================");                                        
    SendToUSBPrinterLn("NRO  PESO BATCH  ACUMUL  HORA    FACTOR ");                                  
    SendToUSBPrinterLn("========================================");  
end;     

procedure PrinterCopyEmbarcacionesRetro(val : integer);
i: integer;
response: typResponseTicketEmbarcas;
begin
    response := ListTicketEmbarca(val);
    SendToUSBPrinterLn("========================================");                                        
    SendToUSBPrinterLn("MATRICULA                    EMBARCACION");                                      
    SendToUSBPrinterLn("========================================");
    if (response.HasError = BoolFalse) then
        if (response.HasData = BoolTrue) then
            for i := 1 to response.Count
            loop
               SendToUSBPrinterLn(response.data[i].codEmbar+ "   " + response.data[i].Embarcacion);
            end loop;
        else
            SendToUSBPrinterLn("-------     SIN EMBARCACIONES    -------");
        end if;
    end if;

    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");  
    SendToUSBPrinterLn(""); 
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");          
    SendToUSBPrinterLn("");   
    SendToUSBPrinterLn(Chr$(27)+"¡");   
    SendToUSBPrinterLn(Chr$(27)+"!"); 
    SendToUSBPrinterLn(Chr$(27)+Chr$(105));
end;

procedure PrinterCopyErroresRetro(val : integer);
i: integer;
response: typResponseAlertas;
begin
    response := ListAlertaGroupByTipo(val);
    if (response.HasError = BoolFalse) then
        SendToUSBPrinterLn("========================================");                                        
        SendToUSBPrinterLn("EVENTO                       OCURRENCIAS");                                      
        SendToUSBPrinterLn("========================================");
        if (response.HasData = BoolTrue) then
            for i := 1 to response.Count
            loop
               SendToUSBPrinterLn(Mid$(response.data[i].TipoAlerta+Space$(33),1,33) + IntegerToString(response.data[i].Cantidad,3));
            end loop;
        else
        SendToUSBPrinterLn("-------        SIN EVENTOS       -------");
        end if;
    end if;
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn(""); 
end;

procedure PrinterCopyFooterRetro;
suma1   : real;
suma2   : real;
i   : integer;
transporte : typTransporte;
embarca : string;
begin
    transporte := GetOldTransporte(T_Pesaje.codTrans);
    embarca := GetOldEmbarcacion(T_Pesaje.codEmbar);
    SendToUSBPrinterLn("========================================");  
    SendToUSBPrinterLn("TOTAL RECIBIDO  : "+Redondea(T_Pesaje.Acum)+" Tn.");      --   3175 Kg.
    SendToUSBPrinterLn("BATCH RECIBIDOS : "+IntegerToString(T_Pesaje.Batch,0));    -- 3
    SendToUSBPrinterLn("REPORTE RECEP.  : "+IntegerToString(T_Pesaje.ticket,0) + "-" + IntegerToString(T_Pesaje.Anio, 0));  --     2
    SendToUSBPrinterLn("========================================"); 
    SendToUSBPrinterLn("       COPIA DE TICKET DE REPORTE");  
    SendToUSBPrinterLn("========================================");    
    if (transporte.incluye = 1) then
    SendToUSBPrinterLn("PLACA VEHICLAR  : "+ T_Pesaje.codEmbar);                           
    else
    SendToUSBPrinterLn("EMBARCACION     : "+ embarca);                             
    SendToUSBPrinterLn("MATRICULA       : "+ T_Pesaje.codEmbar);                           
    end if;
    SendToUSBPrinterLn("FECHA DE TERMINO: "+Date$(T_Pesaje.FechaFin));  -- 14/03/2000
    SendToUSBPrinterLn("HORA DE TERMINO : "+Time$(T_Pesaje.FechaFin));  --20:01     
    SendToUSBPrinterLn("PESO POR BATCH  : "+RealToString(gbConfig.Objetivo,0,2)+"kg."); --1500 Kg.
    SendToUSBPrinterLn("WZERO           : "+RealToString(T_Pesaje.wzero,0,0)); --1500 Kg.
    SendToUSBPrinterLn("WSPAN           : "+RealToString(T_Pesaje.wspan,0,0)); --1500 Kg.
    SendToUSBPrinterLn("WVAL            : "+RealToString(T_Pesaje.wval,0,2)); --1500 Kg.
    SendToUSBPrinterLn("FACTOR          : "+RealToString(T_Pesaje.factor,0,2)); --1500 Kg.  
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");  
    SendToUSBPrinterLn(""); 
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");          
    SendToUSBPrinterLn("");
    PrinterCopyErroresRetro(T_Pesaje.Ticket);  
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");

    if (transporte.incluye = 1) then
        Logger("incluye embarcas");
        PrinterCopyEmbarcacionesRetro(T_Pesaje.Ticket);
    else   
        Logger("no incluye embarcas");                    
    end if; 
    
    SendToUSBPrinterLn(""); 
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");          
    SendToUSBPrinterLn("");   
    SendToUSBPrinterLn(Chr$(27)+"¡");   
    SendToUSBPrinterLn(Chr$(27)+"!"); 
    SendToUSBPrinterLn(Chr$(27)+Chr$(105));
end;     

procedure PrinterCopyDetallesRetro(detalle : typDetalle; acumulado : real);
begin
    SendToUSBPrinter(IntegerToString(detalle.Batch,4)+Space$(2)); 
    SendToUSBPrinter(IntegerToString(detalle.Peso,6)+Space$(2));
    SendToUSBPrinter(IntegerToString(acumulado,8)+Space$(2));
    SendToUSBPrinterLn(Time$(detalle.fecha)+Space$(2));
end;
 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\printer\CopyTicketRetro.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\printer\CopyTicket.iri 
 procedure PrinterHeaderMultiTicket;
begin
    
    SendToUSBPrinterLn("       REPORTE DE PESAJES");  
    SendToUSBPrinterLn("========================================"); 
    SendToUSBPrinterLn(gbEmpresa.Razon);  
    SendToUSBPrinterLn(gbEmpresa.Direccion);  
    SendToUSBPrinterLn("RUC : "+ gbEmpresa.RUC);      
    SendToUSBPrinterLn("Tlf.: "+ gbEmpresa.Telefono);     
    SendToUSBPrinterLn("========================================"); 
end;

procedure PrinterSummary(obePesaje: typPesaje);
suma1   : real;
suma2   : real;
i   : integer;
begin
    SendToUSBPrinter("Nro. TOLVA: "+IntegerToString(gbBalanza.Numero,0));   
    SendToUSBPrinterLn("REPORTE: "+ IntegerToString(obePesaje.ticket, 0));
    SendToUSBPrinter(obePesaje.Transporte + ":");   
    if (obePesaje.incluyeTransporte = 1) then
    SendToUSBPrinterLn(obePesaje.codEmbarca);                           
    else
    SendToUSBPrinterLn(obePesaje.Embarcacion + "-" + obePesaje.codEmbarca);                           
    end if;
    SendToUSBPrinterLn(obePesaje.Especie + " - " + obePesaje.Uso);
    SendToUSBPrinterLn("INICIO : "+ Date$(obePesaje.FechaInicio) + " " + Time$(obePesaje.FechaInicio));  --19:58                   
    SendToUSBPrinter("WZERO: "+RealToString(obePesaje.wzero,0,0)); --1500 Kg.
    SendToUSBPrinterLn("WSPAN: "+RealToString(obePesaje.wspan,0,0)); --1500 Kg.
    SendToUSBPrinter("WVAL: "+RealToString(obePesaje.wval,0,2)); --1500 Kg.
    SendToUSBPrinterLn("FACTOR: "+RealToString(obePesaje.factor,0,2)); --1500 Kg.
    SendToUSBPrinter("ACUM: "+Redondea(obePesaje.Acumulado)+" Tn.");      --   3175 Kg.
    SendToUSBPrinterLn("BATCHS : "+IntegerToString(obePesaje.Batch,0));    -- 3
    SendToUSBPrinterLn("TERMINO: "+Date$(obePesaje.FechaFin) +" " + Time$(obePesaje.FechaFin));  --20:01       
end;     

procedure PrinterCopyHeader(obePesaje: typPesaje);
suma1   : real;
suma2   : real;
i   : integer;
begin
    SendToUSBPrinterLn("========================================"); 
    SendToUSBPrinterLn("       COPIA DE TICKET DE REPORTE");  
    SendToUSBPrinterLn("========================================"); 
    SendToUSBPrinterLn(" ");
    SendToUSBPrinterLn("****************************************"); 
    SendToUSBPrinterLn("**        LOS PESAJES Y EVENTOS       **");
    SendToUSBPrinterLn("**   CORRESPONDIENTES A ESTE TICKET   **");
    SendToUSBPrinterLn("**      PUEDEN NO ESTAR COMPLETOS     **");
    SendToUSBPrinterLn("****************************************"); 
    SendToUSBPrinterLn(" ");   
    SendToUSBPrinterLn(gbEmpresa.Razon);  
    SendToUSBPrinterLn(gbEmpresa.Direccion);  
    SendToUSBPrinterLn("RUC : "+ gbEmpresa.RUC);      
    SendToUSBPrinterLn("Tlf.: "+ gbEmpresa.Telefono);     
    SendToUSBPrinterLn(" ");
    SendToUSBPrinterLn("Nro. TOLVA      : "+IntegerToString(gbBalanza.Numero,0));   
    SendToUSBPrinterLn("CAPACIDAD       : "+ IntegerToString(gbConfig.Maximo,0)+" Kg");   
    SendToUSBPrinterLn("MARCA           : RICE LAKE");
    SendToUSBPrinterLn("                  WEIGHING SYSTEMS");               
    SendToUSBPrinterLn("========================================"); 
    SendToUSBPrinterLn("       COPIA DE TICKET DE REPORTE");  
    SendToUSBPrinterLn("========================================");    
    SendToUSBPrinterLn("SERIE BALANZA   : "+ Left$(gbBalanza.serie + Space$(11), 11));       
    SendToUSBPrinterLn("MODELO          : "+ gbBalanza.Modelo);                                        
    SendToUSBPrinterLn("REPORTE RECEP.  : "+ IntegerToString(obePesaje.ticket,0) + "-" + IntegerToString(obePesaje.Anio, 0));
    SendToUSBPrinterLn("TIPO TRANSPORTE : "+ obePesaje.Transporte);   
    if (obePesaje.incluyeTransporte = 1) then
    SendToUSBPrinterLn("PLACA VEHICLAR  : "+ obePesaje.codEmbarca);                           
    else
    SendToUSBPrinterLn("EMBARCACION     : "+ obePesaje.Embarcacion);                             
    SendToUSBPrinterLn("MATRICULA       : "+ obePesaje.codEmbarca);                           
    end if;
    SendToUSBPrinterLn("ESPECIE         : "+ obePesaje.Especie); --ANCHOVETA   
    --SendToUSBPrinterLn("PROVEEDOR       : "+ obePesaje.Proveedor);                            
    SendToUSBPrinterLn("TIPO DE USO     : "+ obePesaje.Uso); -- CONSERVA                         
    SendToUSBPrinterLn("FECHA DE INICIO : "+ Date$(obePesaje.FechaInicio));  -- 14/03/2000                           
    SendToUSBPrinterLn("HORA DE INICIO  : "+ Time$(obePesaje.FechaInicio));  --19:58                   
    SendToUSBPrinterLn("========================================"); 
    SendToUSBPrinterLn("       COPIA DE TICKET DE REPORTE");  
    SendToUSBPrinterLn("========================================");    
    SendToUSBPrinterLn("PESO POR BATCH  : "+RealToString(gbConfig.Objetivo,0,2)+"kg."); --1500 Kg.
    SendToUSBPrinterLn("WZERO           : "+RealToString(obePesaje.wzero,0,0)); --1500 Kg.
    SendToUSBPrinterLn("WSPAN           : "+RealToString(obePesaje.wspan,0,0)); --1500 Kg.
    SendToUSBPrinterLn("WVAL            : "+RealToString(obePesaje.wval,0,2)); --1500 Kg.
    SendToUSBPrinterLn("FACTOR          : "+RealToString(obePesaje.factor,0,2)); --1500 Kg.
    SendToUSBPrinterLn("========================================");                                        
    SendToUSBPrinterLn("NRO  PESO BATCH  ACUMUL  HORA    FACTOR ");                                  
    SendToUSBPrinterLn("========================================");  
end;     

procedure PrinterCopyEmbarcaciones(val : integer);
i: integer;
response: typResponseTicketEmbarcas;
begin
    response := ListTicketEmbarca(val);
    SendToUSBPrinterLn("========================================");                                        
    SendToUSBPrinterLn("MATRICULA                    EMBARCACION");                                      
    SendToUSBPrinterLn("========================================");
    if (response.HasError = BoolFalse) then
        if (response.HasData = BoolTrue) then
            for i := 1 to response.Count
            loop
               SendToUSBPrinterLn(response.data[i].codEmbar+ "   " + response.data[i].Embarcacion);
            end loop;
        else
            SendToUSBPrinterLn("-------     SIN EMBARCACIONES    -------");
        end if;
    end if;

    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");  
    SendToUSBPrinterLn(""); 
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");          
    SendToUSBPrinterLn("");   
    SendToUSBPrinterLn(Chr$(27)+"¡");   
    SendToUSBPrinterLn(Chr$(27)+"!"); 
    SendToUSBPrinterLn(Chr$(27)+Chr$(105));
end;

procedure PrinterCopyErrores(val : integer);
i: integer;
response: typResponseAlertas;
begin
    response := ListAlertaGroupByTipo(val);
    if (response.HasError = BoolFalse) then
        SendToUSBPrinterLn("========================================");                                        
        SendToUSBPrinterLn("EVENTO                       OCURRENCIAS");                                      
        SendToUSBPrinterLn("========================================");
        if (response.HasData = BoolTrue) then
            for i := 1 to response.Count
            loop
               SendToUSBPrinterLn(Mid$(response.data[i].TipoAlerta+Space$(33),1,33) + IntegerToString(response.data[i].Cantidad,3));
            end loop;
        else
        SendToUSBPrinterLn("-------        SIN EVENTOS       -------");
        end if;
    end if;
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn(""); 
end;

procedure PrinterCopyFooter(obePesaje: typPesaje);
suma1   : real;
suma2   : real;
i   : integer;
begin
    
    SendToUSBPrinterLn("========================================");  
    SendToUSBPrinterLn("TOTAL RECIBIDO  : "+Redondea(obePesaje.Acumulado)+" Tn.");      --   3175 Kg.
    SendToUSBPrinterLn("BATCH RECIBIDOS : "+IntegerToString(obePesaje.Batch,0));    -- 3
    SendToUSBPrinterLn("REPORTE RECEP.  : "+IntegerToString(obePesaje.ticket,0) + "-" + IntegerToString(obePesaje.Anio, 0));  --     2
    SendToUSBPrinterLn("========================================"); 
    SendToUSBPrinterLn("       COPIA DE TICKET DE REPORTE");  
    SendToUSBPrinterLn("========================================");    
    SendToUSBPrinterLn("EMBARCACION     : "+obePesaje.Embarcacion); 
    SendToUSBPrinterLn("MATRICULA       : "+obePesaje.codEmbarca);    -- MATRICULA1
    SendToUSBPrinterLn("FECHA DE TERMINO: "+Date$(obePesaje.FechaFin));  -- 14/03/2000
    SendToUSBPrinterLn("HORA DE TERMINO : "+Time$(obePesaje.FechaFin));  --20:01       
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");  
    SendToUSBPrinterLn(""); 
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");          
    SendToUSBPrinterLn("");
    PrinterCopyErrores(obePesaje.Ticket);  
    
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");

    if (obePesaje.incluyeTransporte = 1) then
        Logger("incluye embarcas");
        PrinterCopyEmbarcaciones(obePesaje.Ticket);
    else   
        Logger("no incluye embarcas");                    
    end if; 
    
    SendToUSBPrinterLn(""); 
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");          
    SendToUSBPrinterLn("");   
    SendToUSBPrinterLn(Chr$(27)+"¡");   
    SendToUSBPrinterLn(Chr$(27)+"!"); 
    SendToUSBPrinterLn(Chr$(27)+Chr$(105));
end;     

procedure PrinterCopyDetalles(detalle : typDetalle; acumulado : real);
begin
    SendToUSBPrinter(IntegerToString(detalle.Batch,4)+Space$(1)); 
    SendToUSBPrinter(IntegerToString(detalle.Peso,6)+Space$(2));
    SendToUSBPrinter(Redondea(acumulado)+Space$(2));
    SendToUSBPrinterLn(Time$(detalle.fecha));
   SendToUSBPrinterLn(RealToString(detalle.Factor,8,2));  
end;
 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\printer\CopyTicket.iri

--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbDetalle.iri 
 function PostDetalle(lFecha: datetime; currentCal: typCalibracion) : typResponseDetalle;
identifier : integer;
result : typResponseDetalle;
codeResult : SysCode; 
query : string;
begin
    query := "insert into Detalle (Ticket, Batch, Peso, Fecha, Objetivo, Factor) values (";
    query := query + IntegerToString(gbRecupera.Ticket, 0) +",";
    query := query + IntegerToString(gbRecupera.Batch, 0) +",";
    query := query + RealToString(gbPesoCaptura, 0, 10) +",";
    query := query + DTToString(lFecha) +",";
    query := query + RealToString(gbConfig.Objetivo, 0, 10) +",";
    query := query + RealToString(currentCal.Factor, 0, 10) +")";
    codeResult := DBExec(query, identifier);
    
    if (codeResult = SysOk) then
        result.HasError := BoolFalse;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function ListDetalle (ticket : integer) : typResponseDetalles;
identifier : integer;
data : typDetalles;
result : typResponseDetalles;
codeResult : SysCode; 
index: integer:= 0;
query: string;
begin
    query:="Select * from Detalle where Ticket = " + IntegerToString(ticket, 0) +" order by batch";
    codeResult := DBExec(query, identifier);
    Logger("list det:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
    if (codeResult = SysOk) then
        if (identifier > 0) then
            while (codeResult = SysOk) 
            loop
                index:=index+1;
                Logger("loop index:" + integertostring(index, 0));
                DBColumnInt(identifier, 1, data[index].Ticket);
                DBColumnInt(identifier, 2, data[index].Batch);
                DBColumnReal(identifier, 3, data[index].Peso);
                DBColumnDT(identifier, 4, data[index].Fecha);
                DBColumnReal(identifier, 5, data[index].Objetivo);
                DBColumnReal(identifier, 6, data[index].Factor);
                codeResult:=DBNext(identifier);
                Logger("list detalle next:"+ syscodetostring(codeResult) + "- index: " + integertostring(index, 0));
            end loop;

            result.Count := index;
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
            Logger("list det: no Data");
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("select detDBErrMsg:"+ DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;


procedure PrintDbDetalle (ticket : integer);
identifier : integer;
data : typDetalle;
result : typResponseDetalles;
codeResult : SysCode; 
index: integer:= 0;
query: string;
acumulado : real;
begin
    acumulado := 0;
    query:="Select * from Detalle where Ticket = " + IntegerToString(ticket, 0) +" order by batch";
    codeResult := DBExec(query, identifier);
    Logger("list det:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
    if (codeResult = SysOk) then
        if (identifier > 0) then
            while (codeResult = SysOk) 
            loop
                index:=index+1;
                Logger("loop index:" + integertostring(index, 0));
                DBColumnInt(identifier, 1, data.Ticket);
                DBColumnInt(identifier, 2, data.Batch);
                DBColumnReal(identifier, 3, data.Peso);
                DBColumnDT(identifier, 4, data.Fecha);
                DBColumnReal(identifier, 5, data.Objetivo);
                DBColumnReal(identifier, 6, data.Factor);
                acumulado := acumulado + data.Peso;

                PrinterCopyDetalles(data, acumulado);
                ProgramDelay(80);

                codeResult:=DBNext(identifier);
                Logger("list detalle next:"+ syscodetostring(codeResult) + "- index: " + integertostring(index, 0));
            end loop;
        else
            Logger("list det: no Data");
        end if;
    else
        Logger("select detDBErrMsg:"+ DBErrMsg);
    end if;
    DBFinalize(identifier);
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbDetalle.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbPesaje.iri 
 function GetPesaje(id: integer) : typResponsePesaje;
identifier : integer;
data : typPesaje;
result : typResponsePesaje;
codeResult : SysCode;
query : string; 
begin
    query := "Select t1.Ticket, t1.codEmbar, t2.Nombre, t1.codEspec, t3.Nombre, ";
    query := query +"t1.codUso, t4.Nombre, t1.codTrans, t5.Nombre, t1.fechaIni, t1.batch, ";
    query := query +"t1.acum, t1.fechaFin, t1.objetivo, t1.wzero, t1.wval, t1.wspan, ";
    query := query +"t1.factor, t1.prove, t1.anio ";
    query := query +" from Pesadas t1";
    query := query +" left join Embarca t2 on t2.codigo = t1.codEmbar";
    query := query +" left join Especie t3 on t3.codigo = t1.codEspec";
    query := query +" left join Uso t4 on t4.codigo = t1.codUso";
    query := query +" left join Transpor t5 on t5.codigo = t1.codTrans";
    query := query +"where Ticket =";
    codeResult := DBExec(query + IntegerToString(id, 0), identifier);
    Logger("get pesa:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
    if (codeResult = SysOk) then
        if (identifier > 0) then
            DBColumnInt(identifier, 1, data.Ticket);
                DBColumnString(identifier, 2, data.CodEmbarca);
                DBColumnstring(identifier, 3, data.Embarcacion);
                DBColumnInt(identifier, 4, data.CodEspecie);
                DBColumnstring(identifier, 5, data.Especie);
                DBColumnInt(identifier, 6, data.CodUso);
                DBColumnstring(identifier, 7, data.Uso);
                DBColumnInt(identifier, 8, data.codTransporte);
                DBColumnstring(identifier, 9, data.Transporte);
                DBColumnDT(identifier, 10, data.FechaInicio);
                DBColumnInt(identifier, 11, data.Batch);
                DBColumnReal(identifier, 12, data.Acumulado);
                DBColumnDT(identifier, 13, data.FechaFin);
                DBColumnReal(identifier, 14, data.Objetivo);
                DBColumnInt(identifier, 15, data.Wzero);
                DBColumnReal(identifier, 16, data.Wval);
                DBColumnInt(identifier, 17, data.Wspan);
                DBColumnReal(identifier, 18, data.Factor);
                DBColumnstring(identifier, 19, data.Proveedor);
                DBColumnInt(identifier, 20, data.Anio);
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
        Logger("select pesa DBErrMsg:"+ DBErrMsg);
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
    end if;
    DBFinalize(identifier);
    return result;
end;

function ListPesaje : typResponsePesajes;
identifier : integer;
data : typPesajes;
result : typResponsePesajes;
codeResult : SysCode; 
index: integer:= 0;
query : string;
begin
    query := "Select t1.Ticket, t1.codEmbar, t2.Nombre, t1.codEspec, t3.Nombre, ";
    query := query +"t1.codUso, t4.Nombre, t1.codTrans, t5.Nombre, t1.fechaIni, t1.batch, ";
    query := query +"t1.acum, t1.fechaFin, t1.objetivo, t1.wzero, t1.wval, t1.wspan, ";
    query := query +"t1.factor, t1.prove, t1.anio, t5.incluye";
    query := query +" from Pesadas t1";
    query := query +" left join Embarca t2 on t2.codigo = t1.codEmbar";
    query := query +" left join Especie t3 on t3.codigo = t1.codEspec";
    query := query +" left join Uso t4 on t4.codigo = t1.codUso";
    query := query +" left join Transpor t5 on t5.codigo = t1.codTrans";
    codeResult := DBExec(query, identifier);
    Logger("list pesa:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
    if (codeResult = SysOk) then
        if (identifier > 0) then
            while (codeResult = SysOk) 
            loop
                index:=index+1;
                Logger("loop index:" + integertostring(index, 0));
                DBColumnInt(identifier, 1, data[index].Ticket);
                DBColumnString(identifier, 2, data[index].CodEmbarca);
                DBColumnstring(identifier, 3, data[index].Embarcacion);
                DBColumnInt(identifier, 4, data[index].CodEspecie);
                DBColumnstring(identifier, 5, data[index].Especie);
                DBColumnInt(identifier, 6, data[index].CodUso);
                DBColumnstring(identifier, 7, data[index].Uso);
                DBColumnInt(identifier, 8, data[index].codTransporte);
                DBColumnstring(identifier, 9, data[index].Transporte);
                DBColumnDT(identifier, 10, data[index].FechaInicio);
                DBColumnInt(identifier, 11, data[index].Batch);
                DBColumnReal(identifier, 12, data[index].Acumulado);
                DBColumnDT(identifier, 13, data[index].FechaFin);
                DBColumnReal(identifier, 14, data[index].Objetivo);
                DBColumnInt(identifier, 15, data[index].Wzero);
                DBColumnReal(identifier, 16, data[index].Wval);
                DBColumnInt(identifier, 17, data[index].Wspan);
                DBColumnReal(identifier, 18, data[index].Factor);
                DBColumnstring(identifier, 19, data[index].Proveedor);
                DBColumnInt(identifier, 20, data[index].Anio);
                DBColumnInt(identifier, 21, data[index].incluyeTransporte);
                codeResult:=DBNext(identifier);
                Logger("list pesa next:"+ syscodetostring(codeResult) + "- index: " + integertostring(index, 0));
            end loop;
            
            gbTotalPesaje:= index;
            result.HasError := BoolFalse;
            result.HasData := BoolTrue;
            result.data := data;
        else
            result.HasError := BoolFalse;
            result.HasData := BoolFalse;
            Logger("list emb: no Data");
        end if;
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("select embDBErrMsg:"+ DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;

procedure PrintPesajeCustom(val: integer);
identifier : integer;
data : typPesaje;
codeResult : SysCode; 
index: integer:= 0;
query : string;
begin
    query := "Select t1.Ticket, t1.codEmbar, t2.Nombre, t1.codEspec, t3.Nombre, ";
    query := query +"t1.codUso, t4.Nombre, t1.codTrans, t5.Nombre, t1.fechaIni, t1.batch, ";
    query := query +"t1.acum, t1.fechaFin, t1.objetivo, t1.wzero, t1.wval, t1.wspan, ";
    query := query +"t1.factor, t1.prove, t1.anio, t5.incluye ";
    query := query +" from Pesadas t1";
    query := query +" left join Embarca t2 on t2.codigo = t1.codEmbar";
    query := query +" left join Especie t3 on t3.codigo = t1.codEspec";
    query := query +" left join Uso t4 on t4.codigo = t1.codUso";
    query := query +" left join Transpor t5 on t5.codigo = t1.codTrans";
    query := query +" order by t1.Ticket";
    
    if ( val > 0) then
        query := query +"  desc limit " + IntegerToString(val, 0);
    end if;

    codeResult := DBExec(query, identifier);
    Logger("list pesa:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
    if (codeResult = SysOk) then
        if (identifier > 0) then
            
            if ( val > 1) then
                PrinterHeaderMultiTicket;
            end if;

            while (codeResult = SysOk) 
            loop
                index:=index+1;
                Logger("loop index:" + integertostring(index, 0));
                DBColumnInt(identifier, 1, data.Ticket);
                DBColumnString(identifier, 2, data.CodEmbarca);
                DBColumnstring(identifier, 3, data.Embarcacion);
                DBColumnInt(identifier, 4, data.CodEspecie);
                DBColumnstring(identifier, 5, data.Especie);
                DBColumnInt(identifier, 6, data.CodUso);
                DBColumnstring(identifier, 7, data.Uso);
                DBColumnInt(identifier, 8, data.codTransporte);
                DBColumnstring(identifier, 9, data.Transporte);
                DBColumnDT(identifier, 10, data.FechaInicio);
                DBColumnInt(identifier, 11, data.Batch);
                DBColumnReal(identifier, 12, data.Acumulado);
                DBColumnDT(identifier, 13, data.FechaFin);
                DBColumnReal(identifier, 14, data.Objetivo);
                DBColumnInt(identifier, 15, data.Wzero);
                DBColumnReal(identifier, 16, data.Wval);
                DBColumnInt(identifier, 17, data.Wspan);
                DBColumnReal(identifier, 18, data.Factor);
                DBColumnstring(identifier, 19, data.Proveedor);
                DBColumnInt(identifier, 20, data.Anio);
                DBColumnInt(identifier, 21, data.incluyeTransporte);

                if (val = 1) then
                    Logger("una copia");
                    PrinterCopyHeader(data);
                    PrintDbDetalle(data.Ticket);
                    PrinterCopyFooter(data);
                else
                    Logger("multiple copia");
                    PrinterSummary(data);
                    ProgramDelay(150);
                end if;

                codeResult:=DBNext(identifier);
                Logger("list pesa next:"+ syscodetostring(codeResult) + "- index: " + integertostring(index, 0));
            end loop;
        else
            Logger("list emb: no Data");
        end if;
    else
        Logger("select embDBErrMsg:"+ DBErrMsg);
    end if;
    DBFinalize(identifier);
end;

function PostPesaje(Pesaje: typPesaje) : typResponsePesaje;
identifier : integer;
result : typResponsePesaje;
codeResult : SysCode; 
query : string;
begin
    query := "Insert into Pesadas (Ticket, codEmbar, codEspec,";
    query := query +"codUso, codTrans, fechaIni, batch, ";
    query := query +"acum, fechaFin, objetivo, wzero, wval, wspan, ";
    query := query +"factor, prove, anio) values (";
    query := query + IntegerToString(Pesaje.Ticket,0) +", ";
    query := query + "'"+ Pesaje.CodEmbarca + "', ";
    query := query + IntegerToString(Pesaje.CodEspecie, 0) +", ";
    query := query + IntegerToString(Pesaje.CodUso, 0) +", ";
    query := query + IntegerToString(Pesaje.codTransporte, 0) +", ";
    query := query + DTToString(Pesaje.FechaInicio) +", ";
    query := query + IntegerToString(Pesaje.Batch, 0) +", ";
    query := query + RealToString(Pesaje.Acumulado, 0, 10) +", ";
    query := query + DTToString(Pesaje.FechaFin) +", ";
    query := query + RealToString(Pesaje.Objetivo, 0, 10) +", ";
    query := query + IntegerToString(Pesaje.Wzero, 0) +", ";
    query := query + RealToString(Pesaje.Wval, 0, 10) +", ";
    query := query + IntegerToString(Pesaje.Wspan, 0) +", ";
    query := query + RealToString(Pesaje.Factor, 0, 10) +", ";
    query := query + "'" + Pesaje.Proveedor + "', ";
    query := query + IntegerTostring(Pesaje.Anio, 0) + ")";
    codeResult := DBExec(query, identifier);
    Logger("get pesa:"+ syscodetostring(codeResult)+",ident:"+integertostring(identifier,0));
    
    if (codeResult = SysOk) then
        result:= GetPesaje(Pesaje.ticket);
    else
        result.HasError := BoolTrue;
        result.ErrorMessage := DBErrMsg; 
        Logger("select pes DBErrMsg:"+ DBErrMsg);
    end if;
    DBFinalize(identifier);
    return result;
end;
 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\database\dbPesaje.iri

--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\utils\Screens.iri 
 procedure DisplayTemporal;
begin
    if (gbTemporal.estado = 1) then
        SetLabelText(lbl29, gbTemporal.nomTransporte);
        SetLabelText(lbl5, gbTemporal.nomEmbarca);
        SetLabelText(lbl6, gbTemporal.nomEspecie);
        SetLabelText(lbl7, gbTemporal.nomUso);
    else
        SetLabelText(lbl29, "");
        SetLabelText(lbl5, "");
        SetLabelText(lbl6, "");
        SetLabelText(lbl7, "");
    end if;
    
    SetLabelText(lbl14, integertostring(gbEmpresa.Ticket,0));
end;

procedure DisplayEmpresa;
begin
    SetLabelText(lbl74, gbEmpresa.Razon);
    SetLabelText(lbl75, gbEmpresa.Direccion);
    SetLabelText(lbl76, gbEmpresa.RUC);
    SetLabelText(lbl77, gbEmpresa.EIP);
    SetLabelText(lbl78, gbEmpresa.Telefono);
    SetLabelText(lbl79, gbEmpresa.NPL);

    if (gbProceso = Inactivo) then
        SetLabelText(lbl14, integertostring(gbEmpresa.Ticket,0));
    end if;
end;

procedure DisplayBalanza;
begin
    SetLabelText(lbl86, gbBalanza.Serie);
    SetLabelText(lbl91, gbBalanza.Modelo);
    SetLabelText(lbl92, gbBalanza.Nombre);
    SetLabelText(lbl93, IntegerToString(gbBalanza.Numero, 0));
    SetLabelText(lbl94, gbBalanza.Flujo);
end;

procedure DisplayConfig;
begin
    SetLabelText(lbl101, RealToString(gbConfig.Objetivo, 0, 0));
    SetLabelText(lbl106, RealToString(gbConfig.Minimo, 0, 0));
    SetLabelText(lbl104, RealToString(gbConfig.Maximo, 0, 0));
    SetLabelText(lbl109, RealToString(gbConfig.TEstabilidad, 0, 2));
    SetLabelText(lbl113, RealToString(gbConfig.TReinicio, 0, 2));
    SetLabelText(lbl110, RealToString(gbConfig.TError1, 0, 2));
    SetLabelText(lbl114, RealToString(gbConfig.TError2, 0, 2));
    SetLabelText(lbl118, RealToString(gbConfig.Objetivo, 0, 0));
end;

procedure DisplayPesajeRetro;
fechaInicio : string;
fechaFin : string;
transporte : typTransporte;
especie : string;
uso : string;
embarca : string;
begin
    transporte := GetOldTransporte(T_Pesaje.codTrans);
    especie := GetOldEspecie(T_Pesaje.codEspec);
    uso := GetOldUso(T_Pesaje.codUso);
    embarca := GetOldEmbarcacion(T_Pesaje.codEmbar);

    fechaInicio:= Date$(T_Pesaje.FechaIni) + " " + Time$(T_Pesaje.FechaIni);
    fechaFin:= Date$(T_Pesaje.FechaFin) + " " + Time$(T_Pesaje.FechaFin);
    SetLabelText(lbl135, IntegerToString(T_Pesaje.Ticket, 0));
    SetLabelText(lbl136, transporte.Nombre);
    SetLabelText(lbl138, especie);
    SetLabelText(lbl139, uso);
    SetLabelText(lbl145, fechaInicio + " - " + fechaFin);
    SetLabelText(lbl142, IntegerToString(T_Pesaje.Batch, 0));
    SetLabelText(lbl143, RealToString(T_Pesaje.Acum, 0, 0));
    if (transporte.incluye = 1) then
    SetLabelText(lbl132, "Placa");
    SetLabelText(lbl137, T_Pesaje.CodEmbar);
    else
    SetLabelText(lbl132, "Embarcacion");
    SetLabelText(lbl137, T_Pesaje.CodEmbar + "-" + embarca);
    end if;
end;

procedure DisplayPesaje;
fechaInicio : string;
fechaFin : string;
begin
    fechaInicio:= Date$(gbListPesaje[gbPosCrud].FechaInicio) + " " + Time$(gbListPesaje[gbPosCrud].FechaInicio);
    fechaFin:= Date$(gbListPesaje[gbPosCrud].FechaFin) + " " + Time$(gbListPesaje[gbPosCrud].FechaFin);
    SetLabelText(lbl135, IntegerToString(gbListPesaje[gbPosCrud].Ticket, 0));
    SetLabelText(lbl136, gbListPesaje[gbPosCrud].Transporte);
    SetLabelText(lbl138, gbListPesaje[gbPosCrud].Especie);
    SetLabelText(lbl139, gbListPesaje[gbPosCrud].Uso);
    SetLabelText(lbl145, fechaInicio + " - " + fechaFin);
    SetLabelText(lbl142, IntegerToString(gbListPesaje[gbPosCrud].Batch, 0));
    SetLabelText(lbl143, RealToString(gbListPesaje[gbPosCrud].Acumulado, 0, 0));
    if (gbListPesaje[gbPosCrud].incluyeTransporte = 1) then
    SetLabelText(lbl132, "Placa");
    SetLabelText(lbl137, gbListPesaje[gbPosCrud].CodEmbarca);
    else
    SetLabelText(lbl132, "Embarcacion");
    SetLabelText(lbl137, gbListPesaje[gbPosCrud].CodEmbarca + "-" + gbListPesaje[gbPosCrud].Embarcacion);
    end if;
end;

procedure DisplayCrud;
value1 : string;
value2 : string;
value3 : string;
begin
    if (gbScreenActive=EmbarcaSc) then
        if (gbTotalEmbarca > 0) then
            value1 := T_Embarcacion.Codigo; --gbListEmbarca[gbPosCrud].Codigo;
            value2 := T_Embarcacion.Nombre; --gbListEmbarca[gbPosCrud].Nombre;
        else
            value1 := "";
            value2 := ""; 
        end if;
    elsif (gbScreenActive=EspecieSc) then
        if (gbTotalEspecie > 0) then
            value1 := IntegerToString(gbListEspecie[gbPosCrud].Codigo, 0);
            value2 := gbListEspecie[gbPosCrud].Nombre;
        else
            value1 := "";
            value2 := ""; 
        end if;
    elsif (gbScreenActive=UsoSc) then
        if (gbTotalUso > 0) then
            value1 := IntegerToString(gbListUso[gbPosCrud].Codigo, 0);
            value2 := gbListUso[gbPosCrud].Nombre;
        else
            value1 := "";
            value2 := ""; 
        end if;
    elsif (gbScreenActive=TransporteSc) then
        if (gbTotalTransporte > 0) then
            value1 := IntegerToString(gbListTransporte[gbPosCrud].Codigo, 0);
            value2 := gbListTransporte[gbPosCrud].Nombre;
            if (gbListTransporte[gbPosCrud].Incluye = 1) then
                value3 := "SI";
            else
                value3 := "NO";
            end if;
        else
            value1 := "";
            value2 := "";
            value3 := "";
        end if;
    end if;
    SetLabelText(lbl58, value1);
    SetLabelText(lbl59, value2);
    SetLabelText(lbl60, value3);
end;

procedure FillEmbarca;
response : typResponseEmbarcaciones;
begin
    response:= ListEmbarcacion;
    if (response.HasError = BoolFalse) then
        if (response.HasData = BoolTrue) then
            gbListEmbarca:= response.data;
            DisplayCrud;
        end if;
    end if;
end;

procedure FillEmbarcaRetro;
begin
    T_Embarcacion.GetFirst;
    DisplayCrud;
end;

procedure FillEspecie;
response : typResponseEspecies;
begin
    response:= ListEspecie;
    if (response.HasError = BoolFalse) then
        if (response.HasData = BoolTrue) then
            gbListEspecie:= response.data;
            DisplayCrud;
        end if;
    end if;
end;

procedure FillUso;
response : typResponseUsos;
begin
    response:= ListUso;
    if (response.HasError = BoolFalse) then
        if (response.HasData = BoolTrue) then
            gbListUso:= response.data;
            DisplayCrud;
        end if;
    end if;
end;

procedure FillTransporte;
response : typResponseTransportes;
begin
    response:= ListTransporte;
    if (response.HasError = BoolFalse) then
        if (response.HasData = BoolTrue) then
            gbListTransporte:= response.data;
            DisplayCrud;
        end if;
    end if;
end;

procedure FillPesaje;
response : typResponsePesajes;
begin
    response:= ListPesaje;
    if (response.HasError = BoolFalse) then
        if (response.HasData = BoolTrue) then
            gbListPesaje:= response.data;
            DisplayPesaje;
        end if;
    end if;
end;

procedure FillPesajeRetro;
begin
    T_Pesaje.GetFirst;
    DisplayPesajeRetro;
end;

procedure SetActionButtons;
begin
    if (gbProceso = Inactivo) then
        if (gbTemporal.estado = 0) then
            SetWidgetVisibility(img30, Voff);
            SetImageWidgetPath(img31, CONST_IMAGE_DATA);
            SetWidgetVisibility(img33, VOn);
        else
            SetWidgetVisibility(img30, VOn);
            SetImageWidgetPath(img30, CONST_IMAGE_START);
            SetImageWidgetPath(img31, CONST_IMAGE_DATA);
            SetWidgetVisibility(img33, VOn);
        end if;
    elsif (gbProceso = Activo) then
        SetImageWidgetPath(img30, CONST_IMAGE_PAUSE);
        SetImageWidgetPath(img31, CONST_IMAGE_STOP);
        SetWidgetVisibility(img33, VOff);
    elsif (gbProceso = Pausado) then
        SetImageWidgetPath(img30, CONST_IMAGE_CONTINUE);
        SetImageWidgetPath(img31, CONST_IMAGE_STOP);
        SetWidgetVisibility(img33, VOff);
    end if;
end;

procedure ProcesoScreen;
begin
    SelectScreen(1);
    SetActionButtons;
    gbScreenActive:=ProcesoSc;
    SetLabelText(lbl118, RealToString(gbConfig.Objetivo, 0, 0));
end;

procedure PrincipalMenuScreen;
begin
    SelectScreen(2);
    gbScreenActive:=MenuPrincipalSc;
end;

procedure DataMenuScreen;
begin
    SelectScreen(3);
    gbScreenActive:=DataMenuSc;
end;

procedure EmbarcaScreen;
begin
    gbPosCrud:=1;
    gbScreenActive:=EmbarcaSc;
    SetLabelText(lbl50, CONST_CRUD_TITLE_EMB);
    SetLabelText(lbl55, CONST_CRUD_EMB_CODE);
    SetLabelText(lbl56, CONST_CRUD_EMB_NAME);
    SetWidgetVisibility(lbl57, Voff);
    SetWidgetVisibility(lbl60, Voff);
    SelectScreen(4);
    BusyShow;
    FillEmbarcaRetro;
    BusyHide;
end;
procedure EspecieScreen;
begin
    gbPosCrud:=1;
    gbScreenActive:=EspecieSc;
    SetLabelText(lbl50, CONST_CRUD_TITLE_ESP);
    SetLabelText(lbl55, CONST_CRUD_CODE);
    SetLabelText(lbl56, CONST_CRUD_NAME);
    SetWidgetVisibility(lbl57, Voff);
    SetWidgetVisibility(lbl60, Voff);
    SelectScreen(4);
    BusyShow;
    FillEspecie;
    BusyHide;
end;
procedure UsoScreen;
begin
    gbPosCrud:=1;
    gbScreenActive:=UsoSc;
    SetLabelText(lbl50, CONST_CRUD_TITLE_USO);
    SetLabelText(lbl55, CONST_CRUD_CODE);
    SetLabelText(lbl56, CONST_CRUD_NAME);
    SetWidgetVisibility(lbl57, Voff);
    SetWidgetVisibility(lbl60, Voff);
    SelectScreen(4);
    BusyShow;
    FillUso;
    BusyHide;
end;
procedure TransporteScreen;
begin
    BusyShow;
    gbPosCrud:=1;
    gbScreenActive:=TransporteSc;
    SetLabelText(lbl50, CONST_CRUD_TITLE_TRA);
    SetLabelText(lbl55, CONST_CRUD_CODE);
    SetLabelText(lbl56, CONST_CRUD_NAME);
    SetLabelText(lbl57, CONST_CRUD_TRANSP_THIRD);
    SetWidgetVisibility(lbl57, Von);
    SetWidgetVisibility(lbl60, Von);
    SelectScreen(4);
    FillTransporte;
    BusyHide;
end;

procedure EmpresaScreen;
begin
    SelectScreen(5);
    DisplayEmpresa;
    gbScreenActive:=EmpresaSc;
end;

procedure BalanzaScreen;
begin
    SelectScreen(6);
    DisplayBalanza;
    gbScreenActive:=BalanzaSc;
end;

procedure ConfigScreen;
begin
    SelectScreen(7);
    DisplayConfig;
    gbScreenActive:=ConfigSc;
end;

procedure UtilesScreen;
begin
    SelectScreen(8);
    gbScreenActive:=UtilesSc;
end;

procedure ReporteScreen;
begin
    BusyShow;
    SelectScreen(9);
    gbScreenActive:=ReporteSc;
    gbPosCrud:=1;
    FillPesajeRetro;
    BusyHide;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\utils\Screens.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\process\CleanTolva.iri 
 procedure ShowRemainingTime( timeInSeconds : integer);
minutes : integer; 
seconds : integer;
result : string;
begin
    seconds := timeInSeconds mod 60;
    minutes := (timeInSeconds - seconds) / 60;
    Logger("total:" + integertostring(timeInSeconds, 0)+ "-second:"+integertostring(seconds,0) + "-min:"+integertostring((timeInSeconds - seconds) / 60,0));
    if (minutes + seconds > 0) then
        result:= Right$("0"+IntegerToString(minutes, 0), 2) + ":" + Right$("0"+IntegerToString(seconds, 0), 2);
    else
        result:= "00:00";
    end if;
    SetLabelText(lbl118, result); 
end;

procedure StartEndLimpieza;
begin
    if (gbLimpieza = Inactivo) then
        Setdigout(0, 1, 1);
        Setdigout(0, 2, 1);
        tmpTiempoLimpiezaInSeconds:=tmpTiempoLimpieza * 60;
        DefineAndStartTimer(5, 100, TimerOneShot);
        gbLimpieza := Activo;
    else
        Setdigout(0, 1, 0);
        Setdigout(0, 2, 0);
        StopTimer(5);
        gbLimpieza := Inactivo;

        SetLabelText(lbl118, RealToString(gbConfig.Objetivo, 0, 0));
    end if;
end;

procedure LimpiezaTolvaOperation(val : string);
begin
    if gbActionLimpia = InitLimpia then
        gbLastPrompUsed:=CONST_LIMPIEZA_P_TIME;
        SetEntry(CONST_DEFAULT_LIMPIEZA_TIME);
        PromptNumeric(gbLastPrompUsed);
        gbActionLimpia := TiempoLimpia; 
    elsif gbActionLimpia = TiempoLimpia then
        if IsValidReal(val) = BoolTrue then
            tmpTiempoLimpieza := stringtoreal(val);
            StartEndLimpieza;
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);    
        end if;
    elsif gbActionLimpia = FinalizaLimpia then
        StartEndLimpieza;
    end if;
end;
 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\process\CleanTolva.iri

--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\printer\Alert.iri 
 function GenerateAlertObject(date: datetime; tipo: integer): typAlerta;
alerta: typAlerta;
begin
    if gbProceso = Activo then
        gbNumAlerta:= gbNumAlerta + 1;
        alerta.Ticket:= gbRecupera.Ticket;
        alerta.Orden:= gbNumAlerta;
    else
        alerta.Ticket:= 0;
        alerta.Orden:= 0;
    end if;
    
    alerta.Fecha:= date;
    alerta.idTipoAlerta:= tipo; 
    return alerta;
end;

procedure PrintEvent(tipo : integer);
lFecha : datetime;
alerta: typAlerta;
evento :  string;
begin
    if (tipo = 1) then
        evento := CONST_EVENT_1;
    elsif (tipo = 2) then
        evento := CONST_EVENT_2;
    elsif (tipo = 3) then
        evento := CONST_EVENT_3;
    elsif (tipo = 4) then
        evento := CONST_EVENT_4;
    end if;

    if gbProceso = Activo or gbProceso = Pausado then
        lFecha:=SystemTime;
        SendToUSBPrinterLn("----------------------------------");  
        SendToUSBPrinterLn("EVENTO: " + evento);  
        
        if (tipo = 3) then
        SendToUSBPrinterLn("Capturado         : " + IntegerToString(gbPesoCaptura,0)+" Kg");
        SendToUSBPrinterLn("Control           : " + IntegerToString(gbConfig.Objetivo* 0.8, 0)+" Kg");
        end if;

        SendToUSBPrinterLn("Fecha             : " +Date$(lFecha));
        SendToUSBPrinterLn("Hora              : " +Time$(lFecha));
        SendToUSBPrinterLn("----------------------------------"); 
        alerta:= GenerateAlertObject(lFecha, tipo);
        PostAlerta(alerta);
    end if;

    DisplayAndClean(evento);
end;

procedure ShowPausaReanudaTicket(isPaused: BooleanType);                                  
lFecha : datetime; 
begin
    lFecha:=SystemTime;
    SendToUSBPrinterLn("=================================");
    if (isPaused = BoolTrue) then
        SendToUSBPrinterLn("**       PROCESO EN PAUSA      **");
    else
        SendToUSBPrinterLn("**      PROCESO REANUDADO      **");
    end if; 
    SendToUSBPrinterLn("HORA: "+Time$(lFecha) +" FECHA: "+Date$(lFecha));  --19:58    
    SendToUSBPrinterLn("=================================");   
end;       
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\printer\Alert.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\printer\Ticket.iri 
 procedure PrintDetalle(lFecha : datetime; currentCal: typCalibracion);
begin
   SendToUSBPrinter(IntegerToString(gbRecupera.batch,3)+Space$(1)); 
   SendToUSBPrinter(RealToString(gbPesoCaptura,6,1)+Space$(2));
   SendToUSBPrinter(Redondea(gbRecupera.acumulado)+Space$(2));
   SendToUSBPrinter(Time$(lFecha));  
   SendToUSBPrinterLn(RealToString(currentCal.Factor,8,2));   
end;

procedure PrintTest;                          
lFecha : datetime;
begin
    lFecha:=SystemTime;
    SendToUSBPrinterLn("************      TEST      ************");  
    SendToUSBPrinterLn("****************************************");  
    SendToUSBPrinterLn(gbEmpresa.Razon);  
    SendToUSBPrinterLn(gbEmpresa.Direccion);  
    SendToUSBPrinterLn("RUC : "+ gbEmpresa.RUC);      
    SendToUSBPrinterLn("Tlf.: "+ gbEmpresa.Telefono);  
    SendToUSBPrinterLn(" ");
    SendToUSBPrinterLn("Nro. TOLVA      : "+IntegerToString(gbBalanza.Numero,0));   
    SendToUSBPrinterLn("CAPACIDAD       : "+ IntegerToString(gbConfig.Maximo,0)+" Kg");    
    SendToUSBPrinterLn("MARCA           : RICE LAKE");
    SendToUSBPrinterLn("                  WEIGHING SYSTEMS");                               
    SendToUSBPrinterLn("SERIE BALANZA   : "+ Left$(gbBalanza.serie + Space$(11), 11));         
    SendToUSBPrinterLn("MODELO          : "+ gbBalanza.Modelo);                             
    SendToUSBPrinterLn("EMBARCACION     : PRUEBA");                             
    SendToUSBPrinterLn("MATRICULA       : 99999");                           
    SendToUSBPrinterLn("FECHA DE INICIO : "+Date$(lFecha));                     
    SendToUSBPrinterLn("HORA DE INICIO  : "+Time$(lFecha));                   
    SendToUSBPrinterLn("PESO POR BATCH  : "+ RealToString(gbConfig.Objetivo, 0, 2)+"kg.");
    SendToUSBPrinterLn("**********FIN TICKET DE PRUEBA**********");                                        
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");  
    SendToUSBPrinterLn(""); 
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");          
    SendToUSBPrinterLn("");   
    SendToUSBPrinterLn(Chr$(27)+"¡");   
    SendToUSBPrinterLn(Chr$(27)+"!"); 
    SendToUSBPrinterLn(Chr$(27)+Chr$(105));
end;

procedure PrintHeader;
currentCal: typCalibracion;
begin
    currentCal:= defDbCalibra;
    SendToUSBPrinterLn(gbEmpresa.Razon);  
    SendToUSBPrinterLn(gbEmpresa.Direccion);  
    SendToUSBPrinterLn("RUC : "+ gbEmpresa.RUC);      
    SendToUSBPrinterLn("Tlf.: "+ gbEmpresa.Telefono);     
    SendToUSBPrinterLn(" ");
    SendToUSBPrinterLn("Nro. TOLVA      : "+IntegerToString(gbBalanza.Numero,0));   
    SendToUSBPrinterLn("CAPACIDAD       : "+ IntegerToString(gbConfig.Maximo,0)+" Kg");   
    SendToUSBPrinterLn("MARCA           : RICE LAKE");
    SendToUSBPrinterLn("                  WEIGHING SYSTEMS");                                   
    SendToUSBPrinterLn("SERIE BALANZA   : "+ Left$(gbBalanza.serie + Space$(11), 11));       
    SendToUSBPrinterLn("MODELO          : "+ gbBalanza.Modelo);                                        
    SendToUSBPrinterLn("REPORTE RECEP.  : "+ IntegerToString(gbRecupera.ticket, 0) + "-" + IntegerToString(gbRecupera.Anio, 0));
    SendToUSBPrinterLn("TIPO TRANSPORTE : "+ gbRecupera.nomTransporte);  
    if (gbRecupera.incluyeTransporte = 1) then
    SendToUSBPrinterLn("PLACA VEHICLAR  : "+ gbRecupera.codEmbarca);                           
    else
    SendToUSBPrinterLn("EMBARCACION     : "+ Left$(gbRecupera.nomEmbarca,20));                             
    SendToUSBPrinterLn("MATRICULA       : "+ gbRecupera.codEmbarca);                           
    end if;
    SendToUSBPrinterLn("ESPECIE         : "+ gbRecupera.nomEspecie);  
    --SendToUSBPrinterLn("PROVEEDOR       : "+ gbRecupera.Proveedor);                        
    SendToUSBPrinterLn("TIPO DE USO     : "+ gbRecupera.nomUso);               
    SendToUSBPrinterLn("FECHA DE INICIO : "+ Date$(gbRecupera.fecInicio));                      
    SendToUSBPrinterLn("HORA DE INICIO  : "+ Time$(gbRecupera.fecInicio));             
    SendToUSBPrinterLn("PESO POR BATCH  : "+ RealToString(gbConfig.Objetivo, 0, 2)+"kg.");
    SendToUSBPrinterLn("COEF. WZERO     : "+ RealToString(currentCal.WZero, 0, 0));
    SendToUSBPrinterLn("COEF. WSPAN     : "+ RealToString(currentCal.Wspan, 0, 0));
    SendToUSBPrinterLn("COEF. WVAL      : "+ RealToString(currentCal.Wval, 0, 2));
    SendToUSBPrinterLn("COEF. FACTOR    : "+ RealToString(currentCal.Factor, 0, 2));
    SendToUSBPrinterLn("========================================");                                           
    SendToUSBPrinterLn("NRO  PESO BATCH  ACUMUL  HORA    FACTOR ");  
    SendToUSBPrinterLn("========================================");
end;


procedure ImprimeDetalles(val : integer);
acumulado : real;
response: typResponseDetalles;
i: integer;
begin
    acumulado := 0;
    response := ListDetalle(val);
    if (response.HasError = BoolFalse) then
        if (response.HasData = BoolTrue) then
            for i := 1 to response.Count
            loop
                acumulado:= acumulado + response.Data[i].Peso;
                SendToUSBPrinter(IntegerToString(response.data[i].Batch,4)+Space$(2)); 
                SendToUSBPrinter(IntegerToString(response.data[i].Peso,6)+Space$(2));
                SendToUSBPrinter(Redondea(acumulado)+Space$(2));
                SendToUSBPrinterLn(Time$(response.data[i].fecha)+Space$(2));
            end loop;
        else
            SendToUSBPrinterLn("No hay datos registrados");
        end if;
    end if;
end;

procedure ImprimeErrores(val : integer);
i: integer;
response: typResponseAlertas;
begin
    response := ListAlertaGroupByTipo(val);
    if (response.HasError = BoolFalse) then
        SendToUSBPrinterLn("========================================");                                        
        SendToUSBPrinterLn("EVENTO                       OCURRENCIAS");                                      
        SendToUSBPrinterLn("========================================");
        if (response.HasData = BoolTrue) then
            for i := 1 to response.Count
            loop
               SendToUSBPrinterLn(Mid$(response.data[i].TipoAlerta+Space$(33),1,33) + IntegerToString(response.data[i].Cantidad,3));
            end loop;
        else
        SendToUSBPrinterLn("-------        SIN EVENTOS       -------");
        end if;
    end if;
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");  
end;


procedure ImprimeEmbarcaciones(val : integer);
i: integer;
response: typResponseTicketEmbarcas;
begin
    response := ListTicketEmbarca(val);
    SendToUSBPrinterLn("========================================");                                        
    SendToUSBPrinterLn("MATRICULA                    EMBARCACION");                                      
    SendToUSBPrinterLn("========================================");
    if (response.HasError = BoolFalse) then
        if (response.HasData = BoolTrue) then
            for i := 1 to response.Count
            loop
               SendToUSBPrinterLn(response.data[i].codEmbar+ "   " + response.data[i].Embarcacion);
            end loop;
        else
            SendToUSBPrinterLn("-------     SIN EMBARCACIONES    -------");
        end if;
    end if;

    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");  
    SendToUSBPrinterLn(""); 
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");          
    SendToUSBPrinterLn("");   
    SendToUSBPrinterLn(Chr$(27)+"¡");   
    SendToUSBPrinterLn(Chr$(27)+"!"); 
    SendToUSBPrinterLn(Chr$(27)+Chr$(105));
end;

procedure PrintFooter;
currentCal: typCalibracion;                      
lFecha : datetime;
begin                                              
    lFecha:=SystemTime;  
    currentCal:= defDbCalibra;
    SendToUSBPrinterLn("========================================");  
    SendToUSBPrinterLn("TOTAL RECIBIDO  : "+Redondea(gbRecupera.acumulado)+" Tn.");
    SendToUSBPrinterLn("BATCH RECIBIDOS : "+IntegerToString(gbRecupera.batch,0));
    SendToUSBPrinterLn("REPORTE RECEP.  : "+ IntegerToString(gbRecupera.ticket,0) + "-" + IntegerToString(gbRecupera.Anio, 0));
    SendToUSBPrinterLn("TIPO TRANSPORTE : "+ gbRecupera.nomTransporte);  
    if (gbRecupera.incluyeTransporte = 1) then
    SendToUSBPrinterLn("PLACA VEHICLAR  : "+ gbRecupera.codEmbarca);                           
    else
    SendToUSBPrinterLn("EMBARCACION     : "+ gbRecupera.nomEmbarca);                             
    SendToUSBPrinterLn("MATRICULA       : "+ gbRecupera.codEmbarca);                           
    end if;
    SendToUSBPrinterLn("FECHA DE TERMINO: "+ Date$(lFecha));
    SendToUSBPrinterLn("HORA DE TERMINO : "+ Time$(lFecha));
    SendToUSBPrinterLn("COEF. WZERO     : "+ RealToString(currentCal.WZero, 0, 0));
    SendToUSBPrinterLn("COEF. WSPAN     : "+ RealToString(currentCal.Wspan, 0, 0));
    SendToUSBPrinterLn("COEF. WVAL      : "+ RealToString(currentCal.Wval, 0, 2));
    SendToUSBPrinterLn("COEF. FACTOR    : "+ RealToString(currentCal.Factor, 0, 2));
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");
    ImprimeErrores(gbRecupera.ticket);   
    
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");

    if (gbRecupera.incluyeTransporte = 1) then
        ImprimeEmbarcaciones(gbRecupera.ticket);
    end if;
    
    SendToUSBPrinterLn(""); 
    SendToUSBPrinterLn("");
    SendToUSBPrinterLn("");          
    SendToUSBPrinterLn("");   
    SendToUSBPrinterLn(Chr$(27)+"¡");   
    SendToUSBPrinterLn(Chr$(27)+"!"); 
    SendToUSBPrinterLn(Chr$(27)+Chr$(105));
end;



 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\printer\Ticket.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\printer\Calibra.iri 
 procedure PrintCalibracion;
response : typResponseCalibracion;
dbCal : typCalibracion;
begin
    response:= GetCalibracion;
    if (response.HasData = BoolTrue and response.HasError = BoolFalse) then
        dbCal := response.data;
        SendToUSBPrinterLn("====================================");
        SendToUSBPrinterLn("        DATOS DE CALIBRACION        ");
        SendToUSBPrinterLn("Fecha    : " + dbCal.FeCal );
        SendToUSBPrinterLn("-----------------------------");  
        SendToUSBPrinterLn("WZERO    : "+ RealToString(dbCal.WZero,0,0));
        SendToUSBPrinterLn("WSPAN    : "+ RealToString(dbCal.WSpan,0,0)); --WZERO.
        SendToUSBPrinterLn("WVAL     : "+ RealToString(dbCal.WVal,0,2)); --WZERO.
        SendToUSBPrinterLn("FACTOR   : "+ RealToString(dbCal.Factor,0,2)); --WZERO.
        SendToUSBPrinterLn("-----------------------------");
        SendToUSBPrinterLn("");
        SendToUSBPrinterLn("=================================");
    else
        DisplayAndClean("No se pudo recuperar la calibracion");
    end if;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\printer\Calibra.iri

--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\handlers\FlechasHandler.iri 
 procedure DisplayFromArrows;
begin
    if (gbScreenActive=ReporteSc) then
        DisplayPesajeRetro;
    else 
        DisplayCrud;
    end if;
end;

procedure MoverAdelante;
max : integer;
begin
    if (gbScreenActive=EmbarcaSc) then
        max:=gbTotalEmbarca;
        GetNextEmbarca;
    elsif (gbScreenActive=EspecieSc) then
        max:=gbTotalEspecie;
    elsif (gbScreenActive=UsoSc) then
        max:=gbTotalUso;
    elsif (gbScreenActive=TransporteSc) then
        max:=gbTotalTransporte;
    elsif (gbScreenActive=ReporteSc) then
        max:=gbTotalPesaje;
        GetNextPesaje;
    end if;

    if (gbPosCrud = max) then 
        gbPosCrud:=1;
    else
        gbPosCrud:=gbPosCrud+1;
    end if;
    DisplayFromArrows;
end;

procedure MoverAtras;
begin
    --Retro code
    if (gbScreenActive=EmbarcaSc) then
        GetPrevEmbarca;
    elsif (gbScreenActive=ReporteSc) then
        GetPrevPesaje;
    end if;
    -- En retro code

    if (gbPosCrud = 1) then 
        if (gbScreenActive=EmbarcaSc) then
            gbPosCrud:=gbTotalEmbarca;
        elsif (gbScreenActive=EspecieSc) then
            gbPosCrud:=gbTotalEspecie;
        elsif (gbScreenActive=UsoSc) then
            gbPosCrud:=gbTotalUso;
        elsif (gbScreenActive=TransporteSc) then
            gbPosCrud:=gbTotalTransporte;
        elsif (gbScreenActive=ReporteSc) then
            gbPosCrud:=gbTotalPesaje;
        end if;
    else
        gbPosCrud:=gbPosCrud-1;
    end if;
    DisplayFromArrows;    
end;

handler NavleftKeyPressed;
begin
    MoverAtras;
end;

handler NavRightKeyPressed;
begin  
    MoverAdelante;
end;

handler NavUpKeyPressed;
begin
    MoverAtras;
end;

handler NavDownKeyPressed;
begin 
    MoverAdelante;
end;     
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\handlers\FlechasHandler.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\handlers\IOProgramming.iri 
 handler DigInS0B3Activate;       --compuertas abiertas
begin
    GetDigin(0, 3, gbStatusCompAb);
    DefineAndStartTimer(2, gbConfig.TError1 * 100, TimerOneShot);
end;

handler DigInS0B4Activate;       --intervencion no autorizada
begin
    GetDigin(0, 4, gbStatusIntNoAut);
    DefineAndStartTimer(3, gbConfig.TError2 * 100, TimerOneShot);
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\handlers\IOProgramming.iri

--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\data-operations\CrudOperation.iri 
 procedure SaveCrud;
begin
    if (gbScreenActive=EmbarcaSc) then
        if (gbTypeCrud = AddCrud) then
            PostEmbarcacion(tmpEmbarca);
            gbTotalEmbarca:=gbTotalEmbarca+1;
            gbPosCrud:=gbTotalEmbarca;
        elsif (gbTypeCrud = UpdateCrud) then
            PutEmbarcacion(tmpEmbarca);
        end if;
        gbListEmbarca[gbPosCrud]:=tmpEmbarca;
    elsif (gbScreenActive=EspecieSc) then
        if (gbTypeCrud = AddCrud) then
            PostEspecie(tmpEspecie);
            gbTotalEspecie:=gbTotalEspecie+1;
            gbPosCrud:=gbTotalEspecie;
        elsif (gbTypeCrud = UpdateCrud) then
            PutEspecie(tmpEspecie);
        end if;
        gbListEspecie[gbPosCrud]:=tmpEspecie;
    elsif (gbScreenActive=UsoSc) then
        if (gbTypeCrud = AddCrud) then
            PostUso(tmpUso);
            gbTotalUso:=gbTotalUso+1;
            gbPosCrud:=gbTotalUso;
        elsif (gbTypeCrud = UpdateCrud) then
            PutUso(tmpUso);
        end if;
        gbListUso[gbPosCrud]:=tmpUso;
    elsif (gbScreenActive=TransporteSc) then
        if (gbTypeCrud = AddCrud) then
            PostTransporte(tmpTransporte);
            gbTotalTransporte:=gbTotalTransporte+1;
            gbPosCrud:=gbTotalTransporte;
        elsif (gbTypeCrud = UpdateCrud) then
            PutTransporte(tmpTransporte);
        end if;
        gbListTransporte[gbPosCrud]:=tmpTransporte;
    end if;
    gbActionCrud := InitCrud;
    DisplayCrud;
end;

procedure BorrarCrud;
begin
    if (gbScreenActive=EmbarcaSc) then
        DeleteEmbarcacion(tmpEmbarca);
        gbTotalEmbarca:=gbTotalEmbarca-1;
        gbPosCrud:=1;
    elsif (gbScreenActive=EspecieSc) then
        DeleteEspecie(tmpEspecie);
        gbTotalEspecie:=gbTotalEspecie-1;
        gbPosCrud:=1;
    elsif (gbScreenActive=UsoSc) then
        DeleteUso(tmpUso);
        gbTotalUso:=gbTotalUso-1;
        gbPosCrud:=1;
    elsif (gbScreenActive=TransporteSc) then
        DeleteTransporte(tmpTransporte);
        gbTotalTransporte:=gbTotalTransporte-1;
        gbPosCrud:=1;
    end if;
    gbActionCrud := InitCrud;
    DisplayCrud;
end;

procedure CrudGenerico(val : string);
setValue: string;
existRecordToEdit: BooleanType;
begin
    if gbActionCrud = InitCrud then
        existRecordToEdit :=  BoolTrue;
        if (gbScreenActive=EmbarcaSc) then
            gbLastPrompUsed:= CONST_CRUD_EMB_P_CODE;
            if (gbTypeCrud = UpdateCrud) then
                if gbTotalEmbarca >= gbPosCrud then existRecordToEdit :=  BoolTrue; else existRecordToEdit :=  BoolFalse; end if;
                setValue:= gbListEmbarca[gbPosCrud].Codigo;
                gbActionCrud := CodigoCrud;
                tmpEmbarca.Id := gbListEmbarca[gbPosCrud].Id;
            else
                gbActionCrud := CodigoCrud; 
            end if;
        elsif (gbScreenActive=EspecieSc) then
            gbLastPrompUsed:= CONST_CRUD_ESP_P_CODE;
            if (gbTypeCrud = UpdateCrud) then
                if gbTotalEspecie >= gbPosCrud then existRecordToEdit := BoolTrue; else existRecordToEdit := BoolFalse; end if;
                setValue:= gbListEspecie[gbPosCrud].Nombre;
                gbActionCrud := NombreCrud;  
                tmpEspecie.Codigo := gbListEspecie[gbPosCrud].Codigo;
            else
                gbActionCrud := CodigoCrud; 
            end if;
        elsif (gbScreenActive=UsoSc) then
            gbLastPrompUsed:= CONST_CRUD_USO_P_CODE;
            if (gbTypeCrud = UpdateCrud) then
                if gbTotalUso >= gbPosCrud then existRecordToEdit := BoolTrue; else existRecordToEdit := BoolFalse; end if;
                setValue:= gbListUso[gbPosCrud].Nombre;
                gbActionCrud := NombreCrud;  
                tmpUso.Codigo := gbListUso[gbPosCrud].Codigo;
            else
                gbActionCrud := CodigoCrud; 
            end if;
        elsif (gbScreenActive=TransporteSc) then
            gbLastPrompUsed:= CONST_CRUD_TRA_P_CODE;
            if (gbTypeCrud = UpdateCrud) then
                if gbTotalTransporte >= gbPosCrud then existRecordToEdit := BoolTrue; else existRecordToEdit := BoolFalse; end if;
                setValue:= gbListTransporte[gbPosCrud].Nombre;
                gbActionCrud := NombreCrud; 
                tmpTransporte.Codigo := gbListTransporte[gbPosCrud].Codigo;
            else
                gbActionCrud := CodigoCrud; 
            end if;
        end if;
        if (existRecordToEdit = BoolTrue) then
            SetEntry(setValue);
            PromptUser(gbLastPrompUsed); 
        else
            DisplayAndClean(CONST_NO_RECORD_TO_PROCESS);
        end if;
    elsif gbActionCrud = CodigoCrud then
        if IsStringNotEmpty(val) = BoolTrue then 
            if (gbScreenActive=EmbarcaSc) then
                tmpEmbarca.Codigo := val;
                gbLastPrompUsed:= CONST_CRUD_EMB_P_NAME;
                if (gbTypeCrud = UpdateCrud) then
                    setValue:= gbListEmbarca[gbPosCrud].Nombre;
                end if;
            elsif (gbScreenActive=EspecieSc) then
                tmpEspecie.Codigo := StringToInteger(val);
                gbLastPrompUsed:= CONST_CRUD_ESP_P_NAME;
                if (gbTypeCrud = UpdateCrud) then
                    setValue:= gbListEspecie[gbPosCrud].Nombre;
                end if;
            elsif (gbScreenActive=UsoSc) then
                tmpUso.Codigo := StringToInteger(val);
                gbLastPrompUsed:= CONST_CRUD_USO_P_NAME;
                if (gbTypeCrud = UpdateCrud) then
                    setValue:= gbListUso[gbPosCrud].Nombre;
                end if;
            elsif (gbScreenActive=TransporteSc) then
                tmpTransporte.Codigo := StringToInteger(val);
                gbLastPrompUsed:= CONST_CRUD_TRA_P_NAME;
                if (gbTypeCrud = UpdateCrud) then
                    setValue:= gbListTransporte[gbPosCrud].Nombre;
                end if; 
            end if;

            SetEntry(setValue);
            PromptUser(gbLastPrompUsed);  
            gbActionCrud := NombreCrud;  
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);
        end if;
    elsif gbActionCrud = NombreCrud then 
       if IsStringNotEmpty(val) = BoolTrue then
            gbActionCrud := InitCrud;            
            if (gbScreenActive=EmbarcaSc) then
                tmpEmbarca.Nombre := val;
                SaveCrud;
            elsif (gbScreenActive=EspecieSc) then
                tmpEspecie.Nombre := val;
                SaveCrud;
            elsif (gbScreenActive=UsoSc) then
                tmpUso.Nombre := val;
                SaveCrud;
            elsif (gbScreenActive=TransporteSc) then
                tmpTransporte.Nombre := val;
                if (gbTypeCrud = UpdateCrud) then
                    SetEntry(IntegerToString(gbListTransporte[gbPosCrud].Incluye, 0));
                end if;
                PromptUser(CONST_CRUD_TRA_P_INCL);  
                gbActionCrud := IncluyeCrud;
            end if;
        else
            PromptUser(CONST_DATA_ERROR + gbLastPrompUsed);
        end if;
    elsif gbActionCrud = IncluyeCrud then 
       if IsStringNotEmpty(val) = BoolTrue then 
            tmpTransporte.Incluye := StringToInteger(val);
            SaveCrud;
        else
            PromptUser(CONST_DATA_ERROR + gbLastPrompUsed);
        end if;
    end if;
end;

procedure CrudDelete(val : string);
existRecordToDelete: BooleanType;
begin
    if gbActionCrud = InitCrud then
        gbTypeCrud := DeleteCrud;
        gbLastPrompUsed:= CONST_GEN_DELETE_CRUD;
        if (gbScreenActive=EmbarcaSc) then
            if gbTotalEmbarca >= gbPosCrud then existRecordToDelete :=  BoolTrue; else existRecordToDelete :=  BoolFalse; end if;
            gbLastPrompUsed:= gbLastPrompUsed + gbListEmbarca[gbPosCrud].Nombre;
        elsif (gbScreenActive=EspecieSc) then
            if gbTotalEspecie >= gbPosCrud then existRecordToDelete := BoolTrue; else existRecordToDelete := BoolFalse; end if;
            gbLastPrompUsed:= gbLastPrompUsed + gbListEspecie[gbPosCrud].Nombre;
        elsif (gbScreenActive=UsoSc) then
            if gbTotalUso >= gbPosCrud then existRecordToDelete := BoolTrue; else existRecordToDelete := BoolFalse; end if;
            gbLastPrompUsed:= gbLastPrompUsed + gbListUso[gbPosCrud].Nombre;
        elsif (gbScreenActive=TransporteSc) then
            if gbTotalTransporte >= gbPosCrud then existRecordToDelete := BoolTrue; else existRecordToDelete := BoolFalse; end if;
            gbLastPrompUsed:= gbLastPrompUsed + gbListTransporte[gbPosCrud].Nombre;
        end if;

        if (existRecordToDelete = BoolTrue) then
            SetEntry(CONST_DEFAULT_SI);
            PromptUser(gbLastPrompUsed); 
            gbActionCrud := CodigoCrud;
        else
            DisplayAndClean(CONST_NO_RECORD_TO_PROCESS);
        end if;
    elsif gbActionCrud = CodigoCrud then
        if AreStringEqual(val, CONST_DEFAULT_SI) = BoolTrue then 
            if (gbScreenActive=EmbarcaSc) then
                tmpEmbarca := gbListEmbarca[gbPosCrud];
            elsif (gbScreenActive=EspecieSc) then
                tmpEspecie := gbListEspecie[gbPosCrud];
            elsif (gbScreenActive=UsoSc) then
                tmpUso := gbListUso[gbPosCrud];
            elsif (gbScreenActive=TransporteSc) then
                tmpTransporte := gbListTransporte[gbPosCrud];
            end if;
            BorrarCrud;
        end if;
    end if;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\data-operations\CrudOperation.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\data-operations\ConfigOperation.iri 
 function CambiaValorSP (sp :integer; valor: real ): syscode;
retorna : syscode;   
bs      : batchstatus;
begin             
    retorna:=SetSPValue(sp, valor);  
    return retorna;
end;

procedure CrudConfig(val : string);
response: typResponseConfiguracion;
begin
    if gbActionConfig = InitPObjConfig then
        SetEntry(RealToString(gbConfig.Objetivo, 0, 0));
        PromptNumeric(CONST_CRUD_CONF_P_PEOB);
        gbLastPrompUsed:=CONST_CRUD_CONF_P_PEOB;
        gbActionConfig := PesoObjConfig; 
    elsif gbActionConfig = InitPesosConfig then
        SetEntry(RealToString(gbConfig.Maximo, 0, 0));
        PromptNumeric(CONST_CRUD_CONF_P_MAXI);  
        gbLastPrompUsed:=CONST_CRUD_CONF_P_MAXI;
        gbActionConfig := CapMaxConfig; 
    elsif gbActionConfig = InitTiemposConfig then
        SetEntry(RealToString(gbConfig.TEstabilidad, 0, 2));
        PromptNumeric(CONST_CRUD_CONF_P_TEST);  
        gbLastPrompUsed:=CONST_CRUD_CONF_P_TEST;
        gbActionConfig := EstabilConfig; 
    elsif gbActionConfig = InitErrorConfig then
        SetEntry(RealToString(gbConfig.TError1, 0, 2));
        PromptNumeric(CONST_CRUD_CONF_P_ERR1);  
        gbLastPrompUsed:=CONST_CRUD_CONF_P_ERR1;
        gbActionConfig := Error1Config; 
    elsif gbActionConfig = PesoObjConfig then
        if IsStringNotEmpty(val) = BoolTrue then 
            tmpConfig.Objetivo := StringToReal(val);

            if(CambiaValorSP(1,tmpConfig.Objetivo)=SysOk)then
                response:= PutConfigObjetivo(tmpConfig);
                gbConfig:= response.Data;
                DisplayConfig;
            else 
                DisplayAndClean("No se pudo actualizar");
            end if;
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);    
        end if;
    
    elsif gbActionConfig = CapMaxConfig then 
        if IsStringNotEmpty(val) = BoolTrue then 
            tmpConfig.Maximo := StringToReal(val); 
            SetEntry(RealToString(gbConfig.Minimo, 0, 0));
            PromptNumeric(CONST_CRUD_CONF_P_MINI);  
            gbLastPrompUsed:=CONST_CRUD_CONF_P_MINI;
            gbActionConfig := PesoMinConfig; 
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);  
        end if;
    elsif gbActionConfig = PesoMinConfig then
        if IsStringNotEmpty(val) = BoolTrue then 

            response:= PutConfigPesoMax(tmpConfig);
            gbConfig:= response.Data;
            
            tmpConfig.Minimo := StringToReal(val);
            if(CambiaValorSP(2,tmpConfig.Minimo)=SysOk)then
                response:= PutConfigPesoMin(tmpConfig);
                gbConfig:= response.Data;
            else 
                DisplayAndClean("No se pudo actualizar peso minimo");
            end if;

            DisplayConfig;
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);  
        end if;
    
    elsif gbActionConfig = EstabilConfig then
        if IsStringNotEmpty(val) = BoolTrue then 
            tmpConfig.TEstabilidad := StringToReal(val);
            SetEntry(RealToString(gbConfig.TReinicio, 0, 2));
            PromptNumeric(CONST_CRUD_CONF_P_TREI);  
            gbLastPrompUsed:=CONST_CRUD_CONF_P_TREI;
            gbActionConfig := ReinConfig; 
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);  
        end if;
    elsif gbActionConfig = ReinConfig then
        if IsStringNotEmpty(val) = BoolTrue then
            tmpConfig.TReinicio := StringToReal(val);
            response:= PutConfigTiempos(tmpConfig);
            gbConfig:= response.Data;
            DisplayConfig;
        else
            PromptNumeric(CONST_DATA_ERROR+gbLastPrompUsed);  
        end if;
    elsif gbActionConfig = Error1Config then
        if IsStringNotEmpty(val) = BoolTrue then 
            tmpConfig.TError1 := StringToReal(val);
            SetEntry(RealToString(gbConfig.TError2, 0, 2));
            PromptNumeric(CONST_CRUD_CONF_P_ERR2);  
            gbLastPrompUsed:=CONST_CRUD_CONF_P_ERR2;
            gbActionConfig := Error2Config; 
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);  
        end if;
    elsif gbActionConfig = Error2Config then
        if IsStringNotEmpty(val) = BoolTrue then 
            tmpConfig.TError2 := StringToReal(val);
            response:= PutConfigErrores(tmpConfig);
            gbConfig:= response.Data;
            DisplayConfig;
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);   
        end if;
    
    end if;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\data-operations\ConfigOperation.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\data-operations\EmpresaOperation.iri 
 procedure CrudEmpresa(val : string);
response: typResponseEmpresa;
begin
    if gbActionEmpresa = InitEmpresa then
        SetEntry(gbEmpresa.Razon);
        gbLastPrompUsed:=CONST_CRUD_EMPR_P_RAZO;
        PromptUser(gbLastPrompUsed);
        gbActionEmpresa := RazonEmpresa; 
    elsif gbActionEmpresa = RazonEmpresa then
        if IsStringNotEmpty(val) = BoolTrue then 
            tmpEmpresa.Razon := val;
            SetEntry(gbEmpresa.Direccion);
            gbLastPrompUsed:=CONST_CRUD_EMPR_P_DIRE;
            PromptUser(gbLastPrompUsed);  
            gbActionEmpresa := DireccionEmpresa;
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);    
        end if;
    
    elsif gbActionEmpresa = DireccionEmpresa then 
        if IsStringNotEmpty(val) = BoolTrue then 
            tmpEmpresa.Direccion := val; 
            gbLastPrompUsed:=CONST_CRUD_EMPR_P_RUC_;
            SetEntry(gbEmpresa.RUC);
            PromptUser(gbLastPrompUsed);  
            gbActionEmpresa := RUCEmpresa; 
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);  
        end if;
    elsif gbActionEmpresa = RUCEmpresa then
        if IsStringNotEmpty(val) = BoolTrue then 
            tmpEmpresa.RUC := val;
            gbLastPrompUsed:=CONST_CRUD_EMPR_P_TELE;
            SetEntry(gbEmpresa.Telefono);
            PromptUser(gbLastPrompUsed);  
            gbActionEmpresa := TelefonoEmpresa;
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);  
        end if;
    
    elsif gbActionEmpresa = TelefonoEmpresa then
        if IsStringNotEmpty(val) = BoolTrue then 
            tmpEmpresa.Telefono := val;
            SetEntry(gbEmpresa.EIP);
            gbLastPrompUsed:=CONST_CRUD_EMPR_P_EIP_;
            PromptUser(gbLastPrompUsed);  
            gbActionEmpresa := EIPEmpresa; 
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);  
        end if;
    elsif gbActionEmpresa = EIPEmpresa then
        if IsStringNotEmpty(val) = BoolTrue then 
            tmpEmpresa.EIP := val;
            SetEntry(gbEmpresa.NPL);
            gbLastPrompUsed:=CONST_CRUD_EMPR_P_NPL_;
            PromptUser(gbLastPrompUsed);  
            gbActionEmpresa := NPLEmpresa;
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);  
        end if;
    elsif gbActionEmpresa = NPLEmpresa then
        if IsStringNotEmpty(val) = BoolTrue then 
            tmpEmpresa.NPL := val;
            response:= PutEmpresa(tmpEmpresa);
            gbEmpresa:= response.Data;
            DisplayEmpresa;
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);   
        end if;
    elsif gbActionEmpresa = InitTicketEmpresa then
        gbLastPrompUsed:=CONST_CRUD_EMPR_P_TICK;
        SetEntry(IntegerToString(gbEmpresa.Ticket, 0));
        PromptNumeric(gbLastPrompUsed);
        gbActionEmpresa := TicketEmpresa; 
    elsif gbActionEmpresa = TicketEmpresa then
        if IsValidInt(val) = BoolTrue then 
            tmpEmpresa.Ticket := StringToInteger(val);
            response:= PutTicketEmpresa(tmpEmpresa);
            gbEmpresa:= response.Data;
            DisplayEmpresa;
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);    
        end if;
    end if;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\data-operations\EmpresaOperation.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\data-operations\BalanzaOperation.iri 
 procedure CrudBalanza(val : string);
response: typResponseBalanza;
begin
    if gbActionBalanza = InitBalanza then
        SetEntry(gbBalanza.Serie);
        gbLastPrompUsed:=CONST_CRUD_BALA_P_SERI;
        PromptUser(gbLastPrompUsed);
        gbActionBalanza := SerieBalanza; 
    elsif gbActionBalanza = SerieBalanza then
        if IsStringNotEmpty(val) = BoolTrue then 
            tmpBalanza.Serie := val;
            SetEntry(gbBalanza.Modelo);
            gbLastPrompUsed:=CONST_CRUD_BALA_P_MODE;
            PromptUser(gbLastPrompUsed);  
            gbActionBalanza := ModeloBalanza;
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);    
        end if;
    
    elsif gbActionBalanza = ModeloBalanza then 
        if IsStringNotEmpty(val) = BoolTrue then 
            tmpBalanza.Modelo := val; 
            gbLastPrompUsed:=CONST_CRUD_BALA_P_NOMB;
            SetEntry(gbBalanza.Nombre);
            PromptUser(gbLastPrompUsed);  
            gbActionBalanza := NombreBalanza; 
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);  
        end if;
    elsif gbActionBalanza = NombreBalanza then
        if IsStringNotEmpty(val) = BoolTrue then 
            tmpBalanza.Nombre := val;
            gbLastPrompUsed:=CONST_CRUD_BALA_P_NUME;
            SetEntry(IntegerToString(gbBalanza.Numero, 0));
            PromptNumeric(gbLastPrompUsed);  
            gbActionBalanza := NumBalanza;
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);  
        end if;
    
    elsif gbActionBalanza = NumBalanza then
        if IsStringNotEmpty(val) = BoolTrue then 
            tmpBalanza.Numero := StringToInteger(val);
            SetEntry(gbBalanza.Flujo);
            gbLastPrompUsed:=CONST_CRUD_BALA_P_FLUJ;
            PromptUser(gbLastPrompUsed);  
            gbActionBalanza := FlujoBalanza; 
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);  
        end if;
    elsif gbActionBalanza = FlujoBalanza then
        if IsStringNotEmpty(val) = BoolTrue then 
            tmpBalanza.Flujo := val;
            response:= PutBalanza(tmpBalanza);
            gbBalanza:= response.Data;
            DisplayBalanza;
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);   
        end if;
    end if;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\data-operations\BalanzaOperation.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\data-operations\ProcesoOperation.iri 
 procedure ProcesoOperacion(val : string);
response: typResponseEmpresa;
transporte : typResponseTransporte;
embarcacion: typResponseEmbarcacion;
requestEmbarca : typEmbarcacion;
especie: typResponseEspecie;
uso: typResponseUso;
begin
    if gbActionProceso = InitProceso then
        gbLastPrompUsed:=CONST_PROCESO_P_TRAN;
        PromptUser(gbLastPrompUsed);
        gbActionProceso := TransporteProceso; 
    elsif gbActionProceso = TransporteProceso then
        if IsStringNotEmpty(val) = BoolTrue then
            transporte:= GetTransporte(StringToInteger(val));
            if (transporte.HasData = BoolTrue and transporte.HasError = BoolFalse) then
                gbTemporal.codTransporte:=  transporte.Data.Codigo;
                gbTemporal.nomTransporte:=  transporte.Data.Nombre;
                gbTemporal.incluyeTransporte:=  transporte.Data.incluye;
                gbTemporal.estado:=  0;
            
                if (gbTemporal.incluyeTransporte = 1) then
                    gbLastPrompUsed:=CONST_PROCESO_P_PLAC;
                    gbActionProceso := PlacaProceso;
                else
                    gbLastPrompUsed:=CONST_PROCESO_P_MATR;
                    gbActionProceso := MatriculaProceso;
                end if;
                PromptUser(gbLastPrompUsed);  
            else
                SetEntry(val);
                PromptUser(CONST_DATA_NO_EXIST+gbLastPrompUsed);    
            end if;
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);    
        end if;
    elsif gbActionProceso = PlacaProceso then 
        if IsStringNotEmpty(val) = BoolTrue then 
            gbTemporal.codEmbarca:=  val;
            gbTemporal.nomEmbarca:=  val;
            gbLastPrompUsed := CONST_PROCESO_P_ESPE;
            gbActionProceso := EspecieProceso;
            PromptUser(gbLastPrompUsed);
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);  
        end if;
    elsif gbActionProceso = MatriculaProceso then
        if IsStringNotEmpty(val) = BoolTrue then
            embarcacion:= GetEmbarcacion(val);
            if (embarcacion.HasData = BoolTrue and embarcacion.HasError = BoolFalse) then
                gbTemporal.codEmbarca:=  embarcacion.Data.Codigo;
                gbTemporal.nomEmbarca:=  embarcacion.Data.Nombre;
            
                gbLastPrompUsed:=CONST_PROCESO_P_ESPE;
                gbActionProceso := EspecieProceso;
                PromptUser(gbLastPrompUsed);  
            else
                gbTemporal.codEmbarca:= val;
                gbLastPrompUsed:= CONST_PROCESO_P_MNOM;
                gbActionProceso := NombreEmbProceso;
                PromptUser(gbLastPrompUsed);  
            end if;
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);    
        end if;
    elsif gbActionProceso = NombreEmbProceso then
        if IsStringNotEmpty(val) = BoolTrue then
            requestEmbarca.Codigo:= gbTemporal.codEmbarca;
            requestEmbarca.Nombre:= val;
            embarcacion:= PostEmbarcacion(requestEmbarca);
            
            gbTemporal.codEmbarca:=  embarcacion.Data.Codigo;
            gbTemporal.nomEmbarca:=  embarcacion.Data.Nombre;
        
            gbLastPrompUsed:= CONST_PROCESO_P_ESPE;
            gbActionProceso := EspecieProceso;
            PromptUser(gbLastPrompUsed);
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);  
        end if;
    elsif gbActionProceso = EspecieProceso then
        if IsStringNotEmpty(val) = BoolTrue then 
            especie:= GetEspecie(StringToInteger(val));
            if (especie.HasData = BoolTrue and especie.HasError = BoolFalse) then
                gbTemporal.codEspecie:=  especie.Data.Codigo;
                gbTemporal.nomEspecie:=  especie.Data.Nombre;
                gbLastPrompUsed:=CONST_PROCESO_P_USO;
                gbActionProceso := UsoProceso;
                PromptUser(gbLastPrompUsed);  
            else
                SetEntry(val);
                PromptUser(CONST_DATA_NO_EXIST+gbLastPrompUsed);    
            end if;
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);  
        end if;
    elsif gbActionProceso = UsoProceso then
        if IsStringNotEmpty(val) = BoolTrue then 
            uso:= GetUso(StringToInteger(val));
            if (uso.HasData = BoolTrue and uso.HasError = BoolFalse) then
                gbTemporal.codUso:=  uso.Data.Codigo;
                gbTemporal.nomUso:=  uso.Data.Nombre;
                --gbTemporal.Proveedor :=  val;
                gbTemporal.estado:=  1;
                DisplayTemporal;
                SetActionButtons;  
            else
                SetEntry(val);
                PromptUser(CONST_DATA_NO_EXIST+gbLastPrompUsed);    
            end if;
        else
            PromptUser(CONST_DATA_ERROR+gbLastPrompUsed);   
        end if;
    end if;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\data-operations\ProcesoOperation.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\data-operations\CalibraOperation.iri 
 procedure CrudCalibracion(val : string);
response: typResponseCalibracion;
fecha : string;
begin
    if gbCalibraProceso = InitCalibracion then
        gbLastPrompUsed:=CONST_CALIBRA_P_DATE;
        PromptUser(gbLastPrompUsed);
        gbCalibraProceso := FechaCalibraAction; 
    elsif gbCalibraProceso = FechaCalibraAction then
        response := PutFechaCalibracion(val);
    end if;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\data-operations\CalibraOperation.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\data-operations\PrinterOperation.iri 
 procedure PrintCopyRetro;
begin
    PrinterCopyHeaderRetro;
    PrintDbDetalle(T_Pesaje.ticket);
    PrinterCopyFooterRetro;
end;

procedure ReimpresionData(numTickets: integer);
i:integer:=0;    
j:integer:=0;
begin
    --BotonKey("","","","","");
    if numTickets = 1 then
        T_Pesaje.Sort(Pesadas_Ticket);
        T_Pesaje.GetLast;
        PrintCopyRetro;
    elsif numTickets > 1 then
        T_Pesaje.Sort(Pesadas_Ticket);
        T_Pesaje.GetFirst;
        while T_Pesaje.GetNext=SysOk
        loop 
            i:=i+1;
        end loop;
        if(i>numTickets) then
            i:=i-numTickets;
        else
            i:=0;
        end if;
        
        T_Pesaje.Sort(Pesadas_Ticket);
        T_Pesaje.GetFirst;
        if(i>0) then
            while(j<i)
            loop
                j:=j+1;
                T_Pesaje.GetNext;
            end loop;
        end if;
        PrinterHeaderMultiTicketRetro;
        PrinterSummaryRetro;
        ProgramDelay(200);
        while T_Pesaje.GetNext=SysOk
        loop
            PrinterSummaryRetro;
            ProgramDelay(200);
        end loop;
    elsif numTickets = -1 then
        if(T_Pesaje.GetFirst=SysOk)then
            T_Pesaje.ticket :=  numTickets;
            if T_Pesaje.FindFirst(Pesadas_Ticket)=SysOk then
                return;
                --rep_TICKET_copia;
            else
                DisplayStatus("No existe registro");
            end if;  
        else
            DisplayStatus("No hay registro");
        end if;
    end if;
end;


procedure ReImpresionNumero(ticket: integer);
codeResult : SysCode;
begin
    --BotonKey("","","","","");

    T_Pesaje.Ticket:= ticket;
    codeResult := T_Pesaje.FindFirst(Pesadas_Ticket);

    if (codeResult = SysOk) then   
        PrintCopyRetro;
    else
        DisplayAndClean(CONST_PRINT_ON_DEMAND_ERROR_SEARCH);
    end if;
end;

procedure RePrinterOperation(val : string);
num: integer;
begin
    if gbActionPrinter = InitPrinter then
        SetEntry(CONST_PRINT_DEFAULT_VALUE);
        PromptUser(CONST_PRINT_PROMPT_PRINT);
        gbActionPrinter := ImprimirPrinter; 
    elsif gbActionPrinter = ImprimirPrinter then
        if (Len(val) > 0) then
            num:= StringToInteger(val);
        else
            num:= 0;
        end if;
        DisplayStatus(CONST_PRINT_INIT_PRINT);
        ReimpresionData(num);
        DisplayAndClean(CONST_PRINT_FIN_PRINT);
    elsif gbActionPrinter = InitSearchPrinter then
        PromptUser(CONST_PRINT_ON_DEMAND_PROMPT);
        gbActionPrinter := ImprimirOnlyOne; 
    elsif gbActionPrinter = ImprimirOnlyOne then
        if (Len(val) > 0) then
            num:= StringToInteger(val);
            DisplayStatus(CONST_PRINT_INIT_PRINT);
            ReImpresionNumero(num);
            DisplayAndClean(CONST_PRINT_FIN_PRINT);
        else
            DisplayAndClean(CONST_PRINT_ON_DEMAND_ERROR);
        end if;
    end if;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\data-operations\PrinterOperation.iri

--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\process\IniciaFinaliza.iri 
 procedure GrabaPesada;
pesaje : typPesaje;
lFechaFin : datetime;
begin
    lFechaFin:= systemtime;
    pesaje.Ticket := gbRecupera.ticket;
    pesaje.CodEmbarca   := gbRecupera.codEmbarca;
    pesaje.CodEspecie  := gbRecupera.codEspecie;
    pesaje.CodUso := gbRecupera.codUso;
    pesaje.codTransporte := gbRecupera.codTransporte;
    pesaje.FechaInicio := gbRecupera.fecInicio;
    pesaje.Batch := gbRecupera.batch;
    pesaje.Acumulado := gbRecupera.acumulado;
    pesaje.FechaFin := lFechaFin;
    pesaje.Objetivo := gbRecupera.Objetivo;
    pesaje.Wzero := gbRecupera.Wzero;
    pesaje.Wval := gbRecupera.Wval;
    pesaje.Wspan := gbRecupera.Wspan;
    pesaje.Factor:= gbRecupera.Factor;
    pesaje.Proveedor:= gbRecupera.Proveedor;
    pesaje.Anio:= gbRecupera.Anio;
    PostPesaje(pesaje);
    CleanRecupera;
end;

procedure DefineAndSaveRecupera;
fecha : datetime;
currentCal: typCalibracion;
begin
    currentCal:= defDbCalibra;
    fecha := systemtime;

    gbEmpresa.Ticket := gbEmpresa.Ticket + 1;
    PutTicketEmpresa(gbEmpresa);

    gbRecupera.ticket := gbEmpresa.Ticket;
    gbRecupera.codEmbarca := gbTemporal.codEmbarca;
    gbRecupera.nomEmbarca := gbTemporal.nomEmbarca;
    gbRecupera.codEspecie := gbTemporal.codEspecie;
    gbRecupera.nomEspecie := gbTemporal.nomEspecie;
    gbRecupera.codUso := gbTemporal.codUso;
    gbRecupera.nomUso := gbTemporal.nomUso;
    gbRecupera.codTransporte := gbTemporal.codTransporte;
    gbRecupera.nomTransporte := gbTemporal.nomTransporte;
    gbRecupera.incluyeTransporte := gbTemporal.incluyeTransporte;
    gbRecupera.fecInicio := fecha;
    gbRecupera.batch := 0;
    gbRecupera.acumulado := 0;
    gbRecupera.estado := 0;
    gbRecupera.eventos := 0;
    gbRecupera.wzero := currentCal.WZero;
    gbRecupera.wspan := currentCal.Wspan;
    gbRecupera.wval := currentCal.Wval;
    gbRecupera.factor := currentCal.Factor;
    gbRecupera.objetivo := gbConfig.Objetivo;
    gbRecupera.Proveedor := gbTemporal.Proveedor;
    gbRecupera.Anio := ObtieneAnio;
    gbRecupera.iniciado := BoolTrue;
end;

procedure PausaReanuda;  
begin
    if(gbProceso = Activo)then  
        DeshabilitarSP(1);
        DeshabilitarSP(2);
    
        ShowPausaReanudaTicket(BoolTrue);
        gbProceso:= Pausado;
    elsif gbProceso = Pausado then
        DeshabilitarSP(1);
        DeshabilitarSP(2);

        if (gbRecupera.estado = 1) then
            HabilitarSP(2);
        else
            HabilitarSP(1);
        end if;

        ShowPausaReanudaTicket(BoolFalse);
        gbProceso:= Activo;
    end if;  
    ProcesoScreen;
end;


procedure FinalizaProceso;
begin
    PrintFooter;
    gbProceso:=Inactivo;
    ProcesoScreen;   
    gbFinal:=0;   
    gbTemporal.estado := 0;
    GrabaPesada;
    SetActionButtons;
    DisplayTemporal;
    DisplayAndClean(CONST_MESSAGE_FIN_);
end;


procedure AsociaEmbarca(val : string);
responseEmbarca : typResponseEmbarcacion;
requestEmbarca : typEmbarcacion;
begin
    gbButtonProceso := AsociaEmbarcaButtonProceso;
    if (gbAsociaProceso = InitAsocia) then
        PromptUser(CONST_ASOCIAEMB_P_MATRI);
        gbAsociaProceso:=BuscaMatriculaAsocia;
    elsif (gbAsociaProceso = BuscaMatriculaAsocia) then    
        if (IsStringNotEmpty(val) = BoolTrue) then
            responseEmbarca := GetEmbarcacion(val);
            if (responseEmbarca.HasData = BoolTrue and responseEmbarca.HasError = BoolFalse) then
                tmpTicketEmbarca.Ticket:= gbRecupera.Ticket;
                tmpTicketEmbarca.codEmbar:= responseEmbarca.Data.codigo;
                tmpTicketEmbarca.Embarcacion:= responseEmbarca.Data.nombre;
                PostTicketEmbarca(tmpTicketEmbarca);
                SetEntry(CONST_DEFAULT_SI);
                PromptUser(CONST_ASOCIAEMB_P_SEGUIR);
                gbAsociaProceso:=PreguntaAsocia;
            else
                tmpMatriEmbAsocia := val;
                PromptUser(CONST_ASOCIAEMB_P_NOMBR); 
                gbAsociaProceso:=AgregaEmbarcaAsocia;
            end if;
        else
            PromptUser(CONST_ASOCIAEMB_P_ERROR); 
            gbAsociaProceso:=BuscaMatriculaAsocia; 
        end if; 
    elsif (gbAsociaProceso=AgregaEmbarcaAsocia) then 
        requestEmbarca.nombre:=val;  
        requestEmbarca.codigo:=tmpMatriEmbAsocia;
        PostEmbarcacion(requestEmbarca); 

        tmpTicketEmbarca.Ticket:=gbRecupera.Ticket;
        tmpTicketEmbarca.codEmbar:=requestEmbarca.codigo;
        tmpTicketEmbarca.Embarcacion:=requestEmbarca.nombre;
        PostTicketEmbarca(tmpTicketEmbarca);

        SetEntry(CONST_DEFAULT_SI);
        PromptUser(CONST_ASOCIAEMB_P_SEGUIR);
        gbAsociaProceso:=PreguntaAsocia;  
        
    elsif (gbAsociaProceso=PreguntaAsocia) then 
        if(UCase$(val)=CONST_DEFAULT_SI) then
            PromptUser(CONST_ASOCIAEMB_P_MATRI);
            gbAsociaProceso := BuscaMatriculaAsocia;  
        else
            FinalizaProceso;    
        end if;
    end if;
end;


procedure ValidaFinalizado;
begin
    if (gbRecupera.incluyeTransporte = 1) then
        gbAsociaProceso := InitAsocia;
        AsociaEmbarca("");
    else
        FinalizaProceso;    
    end if;  
end;

procedure CierreProceso(val: string);
begin
    if AreStringEqual(val, CONST_DEFAULT_SI) = BoolTrue then 
        DeshabilitarSP(1);
        DeshabilitarSP(2);
        DisplayStatus(CONST_MESSAGE_ESTAB);
        DefineAndStartTimer(8, gbConfig.TEstabilidad * 100, TimerOneShot);
        gbFinal:= 1;
    end if;
end;

procedure IniciaSecuencia;
begin
    SetSPValue(1, gbConfig.Objetivo);   
    SetSPValue(2, gbConfig.Minimo);
    
    DeshabilitarSP(1);
    DeshabilitarSP(2);
    HabilitarSP(1);
    DisplayStatus(CONST_MESSAGE_CARGA);
end;


procedure IniciaProceso(val : string);
begin
    if UCase$(val)= CONST_DEFAULT_SI then 
        gbProceso:=Activo; 
        DefineAndSaveRecupera;
        SetLabelText(lbl14, IntegerToString(gbRecupera.ticket, 0));
        SetLabelText(lbl15, IntegerToString(gbRecupera.batch, 0));
        SetLabelText(lbl16, RealToString(gbRecupera.acumulado, 0, 1));              
        gbNumAlerta:=0;
        PrintHeader;           
        gbFinal:=0;
        IniciaSecuencia;
        SetActionButtons;
    end if;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\process\IniciaFinaliza.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\process\GetBatch.iri 
 procedure ProcesaBatch;
residuo : real;                                         
lFecha : datetime; 
currentCal : typCalibracion;  
begin
    currentCal:= defDbCalibra;

    -- GetGross(1, Primary, residuo);
    -- gbPesoCaptura := gbPesoCaptura - residuo; 
    gbRecupera.batch := gbRecupera.batch + 1;
    gbRecupera.Acumulado := gbRecupera.Acumulado + gbPesoCaptura;    
    gbRecupera.estado := 0;
    lFecha:=SystemTime;
    if gbFinal=0 then
        if gbPesoCaptura < (gbConfig.Objetivo * 0.8) then
            PrintEvent(3);
            SetDigOut(0, 8, 1);
            DefineAndStartTimer(7, 500, TimerOneShot);
        end if;    
    end if;
    
    -- Save Detalle
    PostDetalle(lFecha, currentCal); 
    PrintDetalle(lFecha, currentCal);
    
    SetLabelText(lbl15, IntegerToString(gbRecupera.batch, 0));
    SetLabelText(lbl16, RealToString(gbRecupera.Acumulado, 0, 1)); 
    if gbFinal=1 then
        ValidaFinalizado;
    else
        DefineAndStartTimer(4, gbConfig.TReinicio * 100, TimerOneShot);
        DisplayStatus(CONST_MESSAGE_REINI);
    end if;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\process\GetBatch.iri

--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\handlers\SetPoints.iri 
 handler SP1Trip; 
begin
    DeshabilitarSP(1);
    DeshabilitarSP(2);
    DisplayStatus(CONST_MESSAGE_ESTAB);
    DefineAndStartTimer(8, gbConfig.TEstabilidad * 100, TimerOneShot);
    DisplayAndClean("ALCANZA SP1");
end;       

handler SP2Trip;
begin
    DeshabilitarSP(1);
    DeshabilitarSP(2);
    DisplayStatus(CONST_MESSAGE_ESTAB);
    DefineAndStartTimer(9, gbConfig.TEstabilidad * 100, TimerOneShot);
    DisplayAndClean("ALCANZA SP2");
end;   
 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\handlers\SetPoints.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\handlers\Timers.iri 
 handler timer1trip;
begin
    DisplayStatus("");
end; 

handler Timer2Trip;
localIO : integer;
begin
    GetDigin(0,3,localIO);
    if localIO = gbStatusIntNoAut then
        PrintEvent(1);
    end if;
end; 

handler Timer3Trip;
localIO : integer;
begin
    GetDigin(0,4,localIO);
    if localIO = gbStatusCompAb then
        if gbProceso = Activo or gbProceso = Pausado then    
            PrintEvent(2);
        end if;
    end if;
end;    

handler Timer4Trip;
begin
    IniciaSecuencia;   
end; 
      
handler Timer5Trip;
begin
    tmpTiempoLimpiezaInSeconds := tmpTiempoLimpiezaInSeconds -1;
    if (tmpTiempoLimpiezaInSeconds >= 0) then
        ShowRemainingTime(tmpTiempoLimpiezaInSeconds);
        DefineAndStartTimer(5, 100, TimerOneShot);
    else
        StartEndLimpieza;
    end if;
end;


handler Timer6Trip;
begin
    DeshabilitarSP(1);
    DeshabilitarSP(2);
    if gbRecupera.estado = 1 then   
        HabilitarSP(2);
    else
        HabilitarSP(1);
    end if;
    BusyHide; 
end;

handler Timer7Trip;
begin
    SetDigOut(0, 8, 0);
end;

handler Timer8Trip;
begin
    StopTimer(8);
    GetGross(1, Primary, gbPesoCaptura);
    gbRecupera.estado := 1;
    HabilitarSP(2);
    DisplayStatus(CONST_MESSAGE_DESCA);
    DisplayAndClean("ESTABILIZO SP1");
end;

handler Timer9Trip;
begin
    StopTimer(9);
    DisplayAndClean("ESTABILIZO SP2");
    ProcesaBatch;
end;

handler Timer20Trip;
begin
    DisplayStatus("incluye->"+integertostring(gbRecupera.incluyeTransporte, 0));
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\handlers\Timers.iri

handler WidgetClicked;
sys : SysCode;
begin
    if 1 = 0 then
        return;
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\touch\navigation.iri 
 elsif (EventWidget = img8 or EventWidget = img52 or EventWidget = img99 or EventWidget = img119 or EventWidget = img126) then -- menu principal
    PrincipalMenuScreen;
elsif (EventWidget = img51) then -- pantalla proceso
    ProcesoScreen;
elsif (EventWidget = img54 or EventWidget = img19 or EventWidget = lbl20 or EventWidget = img67 or EventWidget = img84) then -- menu mnto
    DataMenuScreen;
elsif (EventWidget = img21 or EventWidget = lbl22)  then
    ConfigScreen;
elsif (EventWidget = img38 or EventWidget = lbl39)  then -- mnto transporte
    TransporteScreen;
elsif (EventWidget = img44 or EventWidget = lbl45)  then -- mnto uso
    UsoScreen;
elsif (EventWidget = img40 or EventWidget = lbl41)  then -- mnto embarca
    EmbarcaScreen;
elsif (EventWidget = img46 or EventWidget = lbl47)  then -- mnto empresa
    EmpresaScreen;
elsif (EventWidget = img42 or EventWidget = lbl43)  then -- mnto especie
    EspecieScreen;
elsif (EventWidget = img48 or EventWidget = lbl49)  then -- mnto balanza
    BalanzaScreen;
elsif (EventWidget = img26 or EventWidget = lbl27)  then -- utiles
    UtilesScreen;
elsif (EventWidget = img24 or EventWidget = lbl25)  then -- utiles
    ReporteScreen; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\touch\navigation.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\touch\actions.iri 
 elsif (EventWidget = img31) then -- datos / finalizar
    if (gbProceso = Inactivo) then
        gbButtonProceso := DataButtonProceso;
        gbActionProceso := InitProceso;
        ProcesoOperacion("");
    else
        gbButtonProceso := FinalizarButtonProceso;
        SetEntry(CONST_DEFAULT_SI);
        PromptUser(CONST_PROCESO_FINALIZAR);
    end if;
elsif (EventWidget = img30) then -- iniciar / pausar / reanudar
    if (gbLimpieza = Inactivo) then
        if (gbProceso = Inactivo) then
            if (gbTemporal.estado = 1) then
                gbButtonProceso := IniciarButtonProceso;
                SetEntry(CONST_DEFAULT_SI);
                PromptUser(CONST_PROCESO_INICIAR);
            else
                DisplayAndClean("Ingresar datos para procesar");
            end if;
        else
            PausaReanuda;
        end if;
    else
        DisplayAndClean("Equipo en Limpieza");
    end if;
elsif (EventWidget = bar9) then -- futuro reporte grafico
    return;
elsif (EventWidget = img32) then -- peso objetivo
    gbActionConfig:=InitPObjConfig;
    gbButtonProceso := ObjetivoButtonProceso;
    CrudConfig("");
elsif (EventWidget = img33) then -- limpieza tolva
    if (gbLimpieza = Inactivo) then
        gbActionLimpia:=InitLimpia;
    else
        gbActionLimpia:=FinalizaLimpia;
    end if;
    gbButtonProceso := LimpiezaButtonProceso;
    LimpiezaTolvaOperation("");
elsif (EventWidget = lbl122) then -- ingresar fecha cal
    gbCalibraProceso := InitCalibracion;
    CrudCalibracion("");
elsif (EventWidget = lbl123) then -- reimprimir calibracion
    PrintCalibracion;
elsif (EventWidget = lbl10 or EventWidget = lbl14) then -- edit ticket number
    if (gbProceso = Inactivo) then
        gbButtonProceso := NumeroTicketButtonProceso;
        gbActionEmpresa := InitTicketEmpresa;
        CrudEmpresa("");
    end if;
elsif (EventWidget = lbl127) then
    gbActionPrinter := InitPrinter;  
    RePrinterOperation("");
elsif (EventWidget = lbl63) then
    gbActionPrinter := InitSearchPrinter;  
    RePrinterOperation(""); 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\touch\actions.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\touch\crud-actions.iri 
 elsif (EventWidget = img61) then -- agregar crud
    gbActionCrud := InitCrud;
    gbTypeCrud := AddCrud;
    CrudGenerico("");
elsif (EventWidget = img64) then -- editar crud
    gbActionCrud := InitCrud;
    gbTypeCrud := UpdateCrud;
    CrudGenerico("");
elsif (EventWidget = img62)  then -- eliminar crud
    gbActionCrud := InitCrud;
    gbTypeCrud := DeleteCrud;
    CrudDelete("");
elsif (EventWidget = img80)  then -- editar empresa
    gbActionEmpresa := InitEmpresa;
    CrudEmpresa("");
elsif (EventWidget = img95)  then -- editar balanza
    gbActionBalanza := InitBalanza;
    CrudBalanza("");
elsif (EventWidget = img96 or EventWidget = img81)  then -- imprimir ticket prueba
    PrintTest;
elsif (EventWidget = lbl100)  then -- editar peso objetivo
    gbActionConfig:=InitPObjConfig;
    CrudConfig("");
elsif (EventWidget = lbl115)  then -- editar pesos
    gbActionConfig:=InitPesosConfig;
    CrudConfig("");
elsif (EventWidget = lbl116)  then -- editar tiempos
    gbActionConfig:=InitTiemposConfig;
    CrudConfig("");
elsif (EventWidget = lbl117)  then -- editar errores
    gbActionConfig:=InitErrorConfig;
    CrudConfig(""); 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\touch\crud-actions.iri
    end if;
end;

--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\handlers\UserEntryHandler.iri 
 handler UserEntry;
userValue : string; 
begin    
    userValue := CleanString(GetEntry);
    ClosePrompt;
    if EventKey = EnterKey then   
        if gbScreenActive = EmbarcaSc or gbScreenActive = EspecieSc
        or gbScreenActive = UsoSc or gbScreenActive = TransporteSc then
            if (gbTypeCrud = DeleteCrud) then
                CrudDelete(userValue);
            else
                CrudGenerico(userValue);
            end if;
        elsif gbScreenActive = EmpresaSc then 
            CrudEmpresa(userValue); 
        elsif gbScreenActive = BalanzaSc then
            CrudBalanza(userValue); 
        elsif gbScreenActive = ConfigSc then
            CrudConfig(userValue); 
        elsif gbScreenActive = ProcesoSc then
            if (gbButtonProceso = DataButtonProceso) then
                ProcesoOperacion(userValue);
            elsif (gbButtonProceso = IniciarButtonProceso) then
                IniciaProceso(userValue);
            elsif (gbButtonProceso = FinalizarButtonProceso) then
                CierreProceso(userValue);
            elsif (gbButtonProceso = ObjetivoButtonProceso) then
                CrudConfig(userValue); 
            elsif (gbButtonProceso = LimpiezaButtonProceso) then
                LimpiezaTolvaOperation(userValue); 
            elsif (gbButtonProceso = NumeroTicketButtonProceso) then
                CrudEmpresa(userValue);
            elsif (gbButtonProceso = AsociaEmbarcaButtonProceso) then
                AsociaEmbarca(userValue);
            end if;
        elsif gbScreenActive = UtilesSc then
            CrudCalibracion(userValue);
        elsif gbScreenActive = ReporteSc then
            RePrinterOperation(userValue);
        end if;
    end if;                                          
end;  
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\handlers\UserEntryHandler.iri

--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\init\FillFirstData.iri 
 function FillEmpresaData : typEmpresa;
existData: typResponseEmpresa;
begin
    existData := GetEmpresa;
    if (existData.HasError = BoolFalse and existData.HasData = BoolFalse) then
        existData:=PostEmpresa(defBdEmpresa);
    end if;

    return existData.data;
end;

function FillBalanzaData : typBalanza;
existData: typResponseBalanza;
begin
    existData := GetBalanza;
    if (existData.HasError = BoolFalse and existData.HasData = BoolFalse) then
        existData:=PostBalanza(defBdBalanza);
    end if;

    return existData.data;
end;

function FillConfigData : typConfiguracion;
existData: typResponseConfiguracion;
begin
    existData := GetConfig;
    if (existData.HasError = BoolFalse and existData.HasData = BoolFalse) then
        existData:= PostConfig(defDbConfig);
    end if;

    return existData.data;
end;

procedure FillEmbarcacionData;
existData: typResponseEmbarcaciones;
begin
    existData := ListEmbarcacion;
    if (existData.HasError = BoolFalse and existData.HasData = BoolFalse) then
        PostEmbarcacion(defDbEmbarca);
    end if;
end;

procedure FillUsoData;
existData: typResponseUsos;
begin
    existData := ListUso;
    if (existData.HasError = BoolFalse and existData.HasData = BoolFalse) then
        PostUso(defDbUso);
    end if;
end;

procedure FillEspecieData;
existData: typResponseEspecies;
begin
    existData := ListEspecie;
    if (existData.HasError = BoolFalse and existData.HasData = BoolFalse) then
        PostEspecie(defDbEspecie);
    end if;
end;

procedure FillTransporteData;
existData: typResponseTransportes;
begin
    existData := ListTransporte;
    if (existData.HasError = BoolFalse and existData.HasData = BoolFalse) then
        PostTransporte(defDbTransporte);
    end if;
end;

procedure FillCalibracionData;
existData: typResponseCalibracion;
begin
    existData := GetCalibracion;
    if (existData.HasError = BoolFalse and existData.HasData = BoolFalse) then
        PostCalibracion(defDbCalibra);
    end if;
end;

procedure FillFirstData;
begin
    gbEmpresa:=FillEmpresaData;
    gbConfig:=FillConfigData;
    gbBalanza:=FillBalanzaData;
    FillEmbarcacionData;
    FillUsoData;
    FillEspecieData;
    FillTransporteData;
    FillCalibracionData;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\init\FillFirstData.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\init\ValidRestart.iri 
 procedure CheckRestart;
begin
    DeshabilitarSP(1);
    DeshabilitarSP(2);
    

    if (gbRecupera.iniciado = BoolTrue) then
        gbProceso:=Activo;
        SetLabelText(lbl14,IntegerToString(gbRecupera.ticket,0));
        SetLabelText(lbl15,IntegerToString(gbRecupera.batch,0));
        SetLabelText(lbl16,RealToString(gbRecupera.acumulado,0,1));  
        SetLabelText(lbl5,gbRecupera.codEmbarca);
        SetLabelText(lbl29,gbRecupera.nomTransporte);
        SetLabelText(lbl6,gbRecupera.nomEspecie);
        SetLabelText(lbl7,gbRecupera.nomUso);  
        PrintEvent(4);
        DisplayAndClean("REINICIANDO PROCESO...");
        DefineAndStartTimer(6, 300, TimerOneShot);
    else
        gbProceso:=Inactivo;
        SetLabelText(lbl14, IntegerToString(gbEmpresa.Ticket, 0));
        if gbTemporal.estado = 1 then
            SetLabelText(lbl5,gbTemporal.codEmbarca);
            SetLabelText(lbl29,gbTemporal.nomTransporte);
            SetLabelText(lbl6,gbTemporal.nomEspecie);
            SetLabelText(lbl7,gbTemporal.nomUso);
        else
            SetLabelText(lbl15,"");
            SetLabelText(lbl16,"");
            SetLabelText(lbl5,"");
            SetLabelText(lbl29,"");
            SetLabelText(lbl6,"");
            SetLabelText(lbl7,"");
        end if;
        DisplayAndClean(CONST_MAIN_MESSAGE);
        BusyHide;
    end if;
    ProcesoScreen;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\init\ValidRestart.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\init\ValidCalibration.iri 
 procedure CheckCalibracion;
currentCal : typCalibracion;
responseCal : typResponseCalibracion;
dbCal : typCalibracion;
begin
    currentCal:= defDbCalibra;
    responseCal:= GetCalibracion;
    dbCal := responseCal.data;
    if(currentCal.Wzero <> dbCal.Wzero or currentCal.Wval <> dbCal.Wval or currentCal.Wspan <> dbCal.Wspan) then
        PutCalibracion(defDbCalibra);
    end if;
end; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\init\ValidCalibration.iri
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\init\InitSystem.iri 
 procedure InitSystem;
begin
    FillFirstData;
    CheckCalibracion;
    CheckRestart; 
end;   
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\init\InitSystem.iri

handler zerokeypressed; 
scode : syscode;
begin 
    scode := ZeroScale(1);
end;

handler tarekeypressed; 
begin 
    DisplayAndClean("Tara deshabilitada");
end;  

begin
--$START  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\init\Start1280.iri 
 BusyShow;
DeshabilitarSP(1);
DeshabilitarSP(2);
gbLimpieza := Inactivo; 
gbProceso := Inactivo;
InitSystem;
ClosePrompt; 
 --$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\init\Start1280.iri
end Tolva1280Main;
--$END  d:\Proyectos Personales\Desarrollo\git\paita_tolva_lurin\code\Tolva1280Main.src
